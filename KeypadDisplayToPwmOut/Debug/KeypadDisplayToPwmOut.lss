
KeypadDisplayToPwmOut.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  000016ea  0000177e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008001ba  008001ba  00001838  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e84  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f97  00000000  00000000  00005a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024a1  00000000  00000000  000069e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cfc  00000000  00000000  00008e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012f2  00000000  00000000  00009b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000498e  00000000  00000000  0000ae72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000f800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	62 c0       	rjmp	.+196    	; 0xc6 <__ctors_end>
       2:	00 00       	nop
       4:	7e c0       	rjmp	.+252    	; 0x102 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c0       	rjmp	.+248    	; 0x102 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c0       	rjmp	.+244    	; 0x102 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c0       	rjmp	.+240    	; 0x102 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c0       	rjmp	.+236    	; 0x102 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c0       	rjmp	.+232    	; 0x102 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c0       	rjmp	.+228    	; 0x102 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c0       	rjmp	.+224    	; 0x102 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c0       	rjmp	.+220    	; 0x102 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c0       	rjmp	.+216    	; 0x102 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6a c0       	rjmp	.+212    	; 0x102 <__bad_interrupt>
      2e:	00 00       	nop
      30:	68 c0       	rjmp	.+208    	; 0x102 <__bad_interrupt>
      32:	00 00       	nop
      34:	66 c0       	rjmp	.+204    	; 0x102 <__bad_interrupt>
      36:	00 00       	nop
      38:	64 c0       	rjmp	.+200    	; 0x102 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c0       	rjmp	.+196    	; 0x102 <__bad_interrupt>
      3e:	00 00       	nop
      40:	60 c0       	rjmp	.+192    	; 0x102 <__bad_interrupt>
      42:	00 00       	nop
      44:	5e c0       	rjmp	.+188    	; 0x102 <__bad_interrupt>
      46:	00 00       	nop
      48:	5c c0       	rjmp	.+184    	; 0x102 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5a c0       	rjmp	.+180    	; 0x102 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c0       	rjmp	.+176    	; 0x102 <__bad_interrupt>
      52:	00 00       	nop
      54:	56 c0       	rjmp	.+172    	; 0x102 <__bad_interrupt>
      56:	00 00       	nop
      58:	54 c0       	rjmp	.+168    	; 0x102 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	52 c0       	rjmp	.+164    	; 0x102 <__bad_interrupt>
      5e:	00 00       	nop
      60:	50 c0       	rjmp	.+160    	; 0x102 <__bad_interrupt>
      62:	00 00       	nop
      64:	4e c0       	rjmp	.+156    	; 0x102 <__bad_interrupt>
      66:	00 00       	nop
      68:	4c c0       	rjmp	.+152    	; 0x102 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4a c0       	rjmp	.+148    	; 0x102 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c0       	rjmp	.+144    	; 0x102 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c0       	rjmp	.+136    	; 0x102 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c0       	rjmp	.+132    	; 0x102 <__bad_interrupt>
      7e:	00 00       	nop
      80:	40 c0       	rjmp	.+128    	; 0x102 <__bad_interrupt>
      82:	00 00       	nop
      84:	3e c0       	rjmp	.+124    	; 0x102 <__bad_interrupt>
      86:	00 00       	nop
      88:	3c c0       	rjmp	.+120    	; 0x102 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b7 02       	muls	r27, r23
      8e:	a9 02       	muls	r26, r25
      90:	41 03       	mulsu	r20, r17
      92:	41 03       	mulsu	r20, r17
      94:	41 03       	mulsu	r20, r17
      96:	41 03       	mulsu	r20, r17
      98:	41 03       	mulsu	r20, r17
      9a:	03 03       	mulsu	r16, r19
      9c:	d9 02       	muls	r29, r25
      9e:	c5 02       	muls	r28, r21
      a0:	41 03       	mulsu	r20, r17
      a2:	be 02       	muls	r27, r30
      a4:	b0 02       	muls	r27, r16
      a6:	dd 02       	muls	r29, r29
      a8:	e4 02       	muls	r30, r20
      aa:	41 03       	mulsu	r20, r17
      ac:	41 03       	mulsu	r20, r17
      ae:	41 03       	mulsu	r20, r17
      b0:	41 03       	mulsu	r20, r17
      b2:	41 03       	mulsu	r20, r17
      b4:	41 03       	mulsu	r20, r17
      b6:	41 03       	mulsu	r20, r17
      b8:	41 03       	mulsu	r20, r17
      ba:	41 03       	mulsu	r20, r17
      bc:	f7 02       	muls	r31, r23
      be:	2e 03       	fmul	r18, r22
      c0:	41 03       	mulsu	r20, r17
      c2:	eb 02       	muls	r30, r27
      c4:	38 03       	fmul	r19, r16

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d0 e4       	ldi	r29, 0x40	; 64
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ea ee       	ldi	r30, 0xEA	; 234
      da:	f6 e1       	ldi	r31, 0x16	; 22
      dc:	00 e0       	ldi	r16, 0x00	; 0
      de:	0b bf       	out	0x3b, r16	; 59
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x14>
      e2:	07 90       	elpm	r0, Z+
      e4:	0d 92       	st	X+, r0
      e6:	aa 3b       	cpi	r26, 0xBA	; 186
      e8:	b1 07       	cpc	r27, r17
      ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0x10>

000000ec <__do_clear_bss>:
      ec:	21 e0       	ldi	r18, 0x01	; 1
      ee:	aa eb       	ldi	r26, 0xBA	; 186
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
      f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
      f6:	a8 3c       	cpi	r26, 0xC8	; 200
      f8:	b2 07       	cpc	r27, r18
      fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
      fc:	1e d7       	rcall	.+3644   	; 0xf3a <main>
      fe:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <_exit>

00000102 <__bad_interrupt>:
     102:	7e cf       	rjmp	.-260    	; 0x0 <__vectors>

00000104 <PwmOCR1A_SetDutyCycle>:
 * @brief Sets the duty cycle of OCR1A
 * 
 * 
 * @param dutyCycle The value to set for PWM
 */
void PwmOCR1A_SetDutyCycle(uint16_t dutyCycle) {
     104:	9c 01       	movw	r18, r24

    //Save reference to Timer control register
    uint8_t conB = TCCR1B;
     106:	e1 e8       	ldi	r30, 0x81	; 129
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	90 81       	ld	r25, Z

	//Clear prescaler to stop timer
    TCCR1B = 0;
     10c:	10 82       	st	Z, r1

	//Set the duty cycle
	PWM_1A_load_duty_cycle(dutyCycle);
     10e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     112:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	//Restart an reset timer
	TCCR1B |= conB;
     116:	80 81       	ld	r24, Z
     118:	89 2b       	or	r24, r25
     11a:	80 83       	st	Z, r24
     11c:	08 95       	ret

0000011e <PwmOCR1B_SetDutyCycle>:
 * @brief Sets the duty cycle of OCR1B
 * 
 * 
 * @param dutyCycle The value to set for PWM
 */
void PwmOCR1B_SetDutyCycle(uint16_t dutyCycle) {
     11e:	9c 01       	movw	r18, r24

    //Save reference to Timer control register
	uint8_t conB = TCCR1B;
     120:	e1 e8       	ldi	r30, 0x81	; 129
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	90 81       	ld	r25, Z

	//Clear prescaler to stop timer
    TCCR1B = 0;
     126:	10 82       	st	Z, r1

	//Set the duty cycle
	PWM_1B_load_duty_cycle(dutyCycle);
     128:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     12c:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	//Restart and reset timer
	TCCR1B |= conB;
     130:	80 81       	ld	r24, Z
     132:	89 2b       	or	r24, r25
     134:	80 83       	st	Z, r24
     136:	08 95       	ret

00000138 <kp_Scan_const>:
* \brief Gets a keypad value from the const 2D array passed and constant pin values
* \return The key pressed, if any from the keypad array
*/
uint8_t kp_Scan_const(const unsigned char uchrColumnPinPositions[KP_COLUMNS],
const unsigned char uchrRowPinPositions[KP_ROWS], const unsigned char uchrKeypadValues[KP_ROWS][KP_COLUMNS]) 
{
     138:	2f 92       	push	r2
     13a:	3f 92       	push	r3
     13c:	4f 92       	push	r4
     13e:	5f 92       	push	r5
     140:	6f 92       	push	r6
     142:	7f 92       	push	r7
     144:	8f 92       	push	r8
     146:	9f 92       	push	r9
     148:	af 92       	push	r10
     14a:	bf 92       	push	r11
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	00 d0       	rcall	.+0      	; 0x15e <kp_Scan_const+0x26>
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	5c 01       	movw	r10, r24
     164:	6b 01       	movw	r12, r22
     166:	4a 01       	movw	r8, r20
	
	//Variables
	uint8_t i = 0; //column index
	uint8_t j = 0; //Subloop row index
	volatile uint8_t currentColumnPress = 0; //The currently pressed column value
     168:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t currentRowPress = 0; //The currently pressed row value
     16a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t pressedValue = '\0'; //The return value for the entered value
	
	//Set ports initial values.
	
	//Output, input initially to not cross contaminate key presses
	writeMaskInput(KP_COLUMN_DIR, KP_COLUMN_PIN_MSK);
     16c:	81 b1       	in	r24, 0x01	; 1
     16e:	88 7f       	andi	r24, 0xF8	; 248
     170:	81 b9       	out	0x01, r24	; 1
	KP_COLUMN_PORT |= KP_COLUMN_PIN_MSK;
     172:	82 b1       	in	r24, 0x02	; 2
     174:	87 60       	ori	r24, 0x07	; 7
     176:	82 b9       	out	0x02, r24	; 2
	
	
	//Input pull up
	writeMaskInput(KP_ROW_DIR, KP_ROW_PIN_MSK);
     178:	87 b1       	in	r24, 0x07	; 7
     17a:	8c 73       	andi	r24, 0x3C	; 60
     17c:	87 b9       	out	0x07, r24	; 7
	KP_ROW_PORT |= (KP_ROW_PIN_MSK);
     17e:	88 b1       	in	r24, 0x08	; 8
     180:	83 6c       	ori	r24, 0xC3	; 195
     182:	88 b9       	out	0x08, r24	; 8
	
	
	
	
	//Loop through and check for columns
	for(i = 0; i < KP_COLUMNS; i++)
     184:	61 2c       	mov	r6, r1
     186:	c2 c0       	rjmp	.+388    	; 0x30c <kp_Scan_const+0x1d4>
	{
		//Set current pin
		setBitOutput(KP_COLUMN_DIR, uchrColumnPinPositions[i]);
     188:	21 b1       	in	r18, 0x01	; 1
     18a:	21 2c       	mov	r2, r1
     18c:	31 2c       	mov	r3, r1
     18e:	21 01       	movw	r4, r2
     190:	23 94       	inc	r2
     192:	85 01       	movw	r16, r10
     194:	06 0d       	add	r16, r6
     196:	11 1d       	adc	r17, r1
     198:	d2 01       	movw	r26, r4
     19a:	c1 01       	movw	r24, r2
     19c:	f8 01       	movw	r30, r16
     19e:	00 80       	ld	r0, Z
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <kp_Scan_const+0x72>
     1a2:	88 0f       	add	r24, r24
     1a4:	99 1f       	adc	r25, r25
     1a6:	aa 1f       	adc	r26, r26
     1a8:	bb 1f       	adc	r27, r27
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <kp_Scan_const+0x6a>
     1ae:	82 2b       	or	r24, r18
     1b0:	81 b9       	out	0x01, r24	; 1
		KP_COLUMN_PORT &= ~(1 << uchrColumnPinPositions[i]);
     1b2:	92 b1       	in	r25, 0x02	; 2
     1b4:	ee 24       	eor	r14, r14
     1b6:	e3 94       	inc	r14
     1b8:	f1 2c       	mov	r15, r1
     1ba:	97 01       	movw	r18, r14
     1bc:	00 80       	ld	r0, Z
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <kp_Scan_const+0x8c>
     1c0:	22 0f       	add	r18, r18
     1c2:	33 1f       	adc	r19, r19
     1c4:	0a 94       	dec	r0
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <kp_Scan_const+0x88>
     1c8:	82 2f       	mov	r24, r18
     1ca:	80 95       	com	r24
     1cc:	89 23       	and	r24, r25
     1ce:	82 b9       	out	0x02, r24	; 2
		
		//Slight delay for time to take affect
		delayForMicroseconds(1);
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 17 09 	call	0x122e	; 0x122e <delayForMicroseconds>
		
		//Read the value on the row pins
		currentRowPress = (KP_ROW_READ & KP_ROW_PIN_MSK);
     1d8:	86 b1       	in	r24, 0x06	; 6
     1da:	83 7c       	andi	r24, 0xC3	; 195
     1dc:	8a 83       	std	Y+2, r24	; 0x02
		
		//Slight delay for time to take affect
		delayForMicroseconds(1);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 17 09 	call	0x122e	; 0x122e <delayForMicroseconds>
		
		//Reset current pin
		KP_COLUMN_PORT |= (1 << uchrColumnPinPositions[i]);
     1e6:	82 b1       	in	r24, 0x02	; 2
     1e8:	f8 01       	movw	r30, r16
     1ea:	00 80       	ld	r0, Z
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <kp_Scan_const+0xba>
     1ee:	ee 0c       	add	r14, r14
     1f0:	ff 1c       	adc	r15, r15
     1f2:	0a 94       	dec	r0
     1f4:	e2 f7       	brpl	.-8      	; 0x1ee <kp_Scan_const+0xb6>
     1f6:	e8 2a       	or	r14, r24
     1f8:	e2 b8       	out	0x02, r14	; 2
		setBitInput(KP_COLUMN_DIR, uchrColumnPinPositions[i]);
     1fa:	81 b1       	in	r24, 0x01	; 1
     1fc:	b2 01       	movw	r22, r4
     1fe:	a1 01       	movw	r20, r2
     200:	00 80       	ld	r0, Z
     202:	04 c0       	rjmp	.+8      	; 0x20c <kp_Scan_const+0xd4>
     204:	44 0f       	add	r20, r20
     206:	55 1f       	adc	r21, r21
     208:	66 1f       	adc	r22, r22
     20a:	77 1f       	adc	r23, r23
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <kp_Scan_const+0xcc>
     210:	24 2e       	mov	r2, r20
     212:	20 94       	com	r2
     214:	28 22       	and	r2, r24
     216:	21 b8       	out	0x01, r2	; 1
		
		//If there is a value indicating a key press...
		if(currentRowPress != KP_ROW_PIN_MSK)
     218:	8a 81       	ldd	r24, Y+2	; 0x02
     21a:	83 3c       	cpi	r24, 0xC3	; 195
     21c:	09 f4       	brne	.+2      	; 0x220 <kp_Scan_const+0xe8>
     21e:	75 c0       	rjmp	.+234    	; 0x30a <kp_Scan_const+0x1d2>
		{
			
			//Invert the pins
			
			//Output, input initially to not cross contaminate key presses
			writeMaskInput(KP_ROW_DIR, KP_ROW_PIN_MSK);
     220:	87 b1       	in	r24, 0x07	; 7
     222:	8c 73       	andi	r24, 0x3C	; 60
     224:	87 b9       	out	0x07, r24	; 7
			KP_ROW_PORT |= KP_ROW_PIN_MSK;
     226:	88 b1       	in	r24, 0x08	; 8
     228:	83 6c       	ori	r24, 0xC3	; 195
     22a:	88 b9       	out	0x08, r24	; 8
			
			
			//Input pull up
			writeMaskInput(KP_COLUMN_DIR, KP_COLUMN_PIN_MSK);
     22c:	81 b1       	in	r24, 0x01	; 1
     22e:	88 7f       	andi	r24, 0xF8	; 248
     230:	81 b9       	out	0x01, r24	; 1
			KP_COLUMN_PORT |= (KP_COLUMN_PIN_MSK);
     232:	82 b1       	in	r24, 0x02	; 2
     234:	87 60       	ori	r24, 0x07	; 7
     236:	82 b9       	out	0x02, r24	; 2
			
			//Slight delay for time to take affect
			delayForMicroseconds(1);
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	f8 d7       	rcall	.+4080   	; 0x122e <delayForMicroseconds>
			
			//Loop through the rows...
			for(j = 0; j < KP_ROWS; j++)
     23e:	71 2c       	mov	r7, r1
     240:	54 c0       	rjmp	.+168    	; 0x2ea <kp_Scan_const+0x1b2>
			{
				//Set current pin
				setBitOutput(KP_ROW_DIR, uchrRowPinPositions[j]);
     242:	27 b1       	in	r18, 0x07	; 7
     244:	e7 2c       	mov	r14, r7
     246:	f1 2c       	mov	r15, r1
     248:	86 01       	movw	r16, r12
     24a:	0e 0d       	add	r16, r14
     24c:	1f 1d       	adc	r17, r15
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	f8 01       	movw	r30, r16
     258:	00 80       	ld	r0, Z
     25a:	04 c0       	rjmp	.+8      	; 0x264 <kp_Scan_const+0x12c>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	aa 1f       	adc	r26, r26
     262:	bb 1f       	adc	r27, r27
     264:	0a 94       	dec	r0
     266:	d2 f7       	brpl	.-12     	; 0x25c <kp_Scan_const+0x124>
     268:	82 2b       	or	r24, r18
     26a:	87 b9       	out	0x07, r24	; 7
				KP_ROW_PORT &= ~(1 << uchrRowPinPositions[j]);
     26c:	28 b1       	in	r18, 0x08	; 8
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	00 80       	ld	r0, Z
     274:	02 c0       	rjmp	.+4      	; 0x27a <kp_Scan_const+0x142>
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	0a 94       	dec	r0
     27c:	e2 f7       	brpl	.-8      	; 0x276 <kp_Scan_const+0x13e>
     27e:	80 95       	com	r24
     280:	82 23       	and	r24, r18
     282:	88 b9       	out	0x08, r24	; 8
				
				//Slight delay for time to take affect
				delayForMicroseconds(1);
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	d2 d7       	rcall	.+4004   	; 0x122e <delayForMicroseconds>
				
				//Read the value on the column pins
				currentColumnPress = (KP_COLUMN_READ & KP_COLUMN_PIN_MSK);
     28a:	80 b1       	in	r24, 0x00	; 0
     28c:	87 70       	andi	r24, 0x07	; 7
     28e:	89 83       	std	Y+1, r24	; 0x01
				
				//If there is a value indicating a key press...
				if(currentColumnPress != KP_COLUMN_PIN_MSK)
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	87 30       	cpi	r24, 0x07	; 7
     294:	61 f0       	breq	.+24     	; 0x2ae <kp_Scan_const+0x176>
				{
					//We found our value
					return uchrKeypadValues[j][i];
     296:	f7 01       	movw	r30, r14
     298:	ee 0f       	add	r30, r30
     29a:	ff 1f       	adc	r31, r31
     29c:	ee 0e       	add	r14, r30
     29e:	ff 1e       	adc	r15, r31
     2a0:	8e 0c       	add	r8, r14
     2a2:	9f 1c       	adc	r9, r15
     2a4:	f4 01       	movw	r30, r8
     2a6:	e6 0d       	add	r30, r6
     2a8:	f1 1d       	adc	r31, r1
     2aa:	80 81       	ld	r24, Z
     2ac:	34 c0       	rjmp	.+104    	; 0x316 <kp_Scan_const+0x1de>
				}
				
				//Reset current pin
				setBitInput(KP_ROW_DIR, uchrRowPinPositions[j]);
     2ae:	27 b1       	in	r18, 0x07	; 7
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	a0 e0       	ldi	r26, 0x00	; 0
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	f8 01       	movw	r30, r16
     2ba:	00 80       	ld	r0, Z
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <kp_Scan_const+0x18e>
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	aa 1f       	adc	r26, r26
     2c4:	bb 1f       	adc	r27, r27
     2c6:	0a 94       	dec	r0
     2c8:	d2 f7       	brpl	.-12     	; 0x2be <kp_Scan_const+0x186>
     2ca:	80 95       	com	r24
     2cc:	82 23       	and	r24, r18
     2ce:	87 b9       	out	0x07, r24	; 7
				KP_ROW_PORT &= ~(1 << uchrRowPinPositions[j]);
     2d0:	28 b1       	in	r18, 0x08	; 8
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	00 80       	ld	r0, Z
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <kp_Scan_const+0x1a6>
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	0a 94       	dec	r0
     2e0:	e2 f7       	brpl	.-8      	; 0x2da <kp_Scan_const+0x1a2>
     2e2:	80 95       	com	r24
     2e4:	82 23       	and	r24, r18
     2e6:	88 b9       	out	0x08, r24	; 8
			
			//Slight delay for time to take affect
			delayForMicroseconds(1);
			
			//Loop through the rows...
			for(j = 0; j < KP_ROWS; j++)
     2e8:	73 94       	inc	r7
     2ea:	f3 e0       	ldi	r31, 0x03	; 3
     2ec:	f7 15       	cp	r31, r7
     2ee:	08 f0       	brcs	.+2      	; 0x2f2 <kp_Scan_const+0x1ba>
     2f0:	a8 cf       	rjmp	.-176    	; 0x242 <kp_Scan_const+0x10a>
				KP_ROW_PORT &= ~(1 << uchrRowPinPositions[j]);
				
			}
			
			//Output, input initially to not cross contaminate key presses
			writeMaskInput(KP_COLUMN_DIR, KP_COLUMN_PIN_MSK);
     2f2:	81 b1       	in	r24, 0x01	; 1
     2f4:	88 7f       	andi	r24, 0xF8	; 248
     2f6:	81 b9       	out	0x01, r24	; 1
			KP_COLUMN_PORT |= KP_COLUMN_PIN_MSK;
     2f8:	82 b1       	in	r24, 0x02	; 2
     2fa:	87 60       	ori	r24, 0x07	; 7
     2fc:	82 b9       	out	0x02, r24	; 2
			
			
			//Input pull up
			writeMaskInput(KP_ROW_DIR, KP_ROW_PIN_MSK);
     2fe:	87 b1       	in	r24, 0x07	; 7
     300:	8c 73       	andi	r24, 0x3C	; 60
     302:	87 b9       	out	0x07, r24	; 7
			KP_ROW_PORT |= (KP_ROW_PIN_MSK);
     304:	88 b1       	in	r24, 0x08	; 8
     306:	83 6c       	ori	r24, 0xC3	; 195
     308:	88 b9       	out	0x08, r24	; 8
	
	
	
	
	//Loop through and check for columns
	for(i = 0; i < KP_COLUMNS; i++)
     30a:	63 94       	inc	r6
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	86 15       	cp	r24, r6
     310:	08 f0       	brcs	.+2      	; 0x314 <kp_Scan_const+0x1dc>
     312:	3a cf       	rjmp	.-396    	; 0x188 <kp_Scan_const+0x50>
		
		
	}
	
	
	return pressedValue;
     314:	80 e0       	ldi	r24, 0x00	; 0
	

	
}
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	df 90       	pop	r13
     328:	cf 90       	pop	r12
     32a:	bf 90       	pop	r11
     32c:	af 90       	pop	r10
     32e:	9f 90       	pop	r9
     330:	8f 90       	pop	r8
     332:	7f 90       	pop	r7
     334:	6f 90       	pop	r6
     336:	5f 90       	pop	r5
     338:	4f 90       	pop	r4
     33a:	3f 90       	pop	r3
     33c:	2f 90       	pop	r2
     33e:	08 95       	ret

00000340 <LcdSendCommand>:
	
	for(uint8_t i = 0; i < 5; i++)
	{
		LcdPrintChar(strToPrint[i]);	
	}
}
     340:	9b b1       	in	r25, 0x0b	; 11
     342:	93 7f       	andi	r25, 0xF3	; 243
     344:	9b b9       	out	0x0b, r25	; 11
     346:	9b b1       	in	r25, 0x0b	; 11
     348:	90 64       	ori	r25, 0x40	; 64
     34a:	9b b9       	out	0x0b, r25	; 11
     34c:	95 b1       	in	r25, 0x05	; 5
     34e:	15 b8       	out	0x05, r1	; 5
     350:	95 b1       	in	r25, 0x05	; 5
     352:	89 2b       	or	r24, r25
     354:	85 b9       	out	0x05, r24	; 5
     356:	8b b1       	in	r24, 0x0b	; 11
     358:	8f 7b       	andi	r24, 0xBF	; 191
     35a:	8b b9       	out	0x0b, r24	; 11
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	72 c7       	rjmp	.+3812   	; 0x1246 <delayForMilliseconds>
     362:	08 95       	ret

00000364 <LcdConstInit>:
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	7c 01       	movw	r14, r24
     370:	8b 01       	movw	r16, r22
     372:	8b b1       	in	r24, 0x0b	; 11
     374:	83 7b       	andi	r24, 0xB3	; 179
     376:	8b b9       	out	0x0b, r24	; 11
     378:	84 b1       	in	r24, 0x04	; 4
     37a:	8f ef       	ldi	r24, 0xFF	; 255
     37c:	84 b9       	out	0x04, r24	; 4
     37e:	c0 e0       	ldi	r28, 0x00	; 0
     380:	05 c0       	rjmp	.+10     	; 0x38c <LcdConstInit+0x28>
     382:	de df       	rcall	.-68     	; 0x340 <LcdSendCommand>
     384:	8a e0       	ldi	r24, 0x0A	; 10
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	5e d7       	rcall	.+3772   	; 0x1246 <delayForMilliseconds>
     38a:	cf 5f       	subi	r28, 0xFF	; 255
     38c:	f7 01       	movw	r30, r14
     38e:	ec 0f       	add	r30, r28
     390:	f1 1d       	adc	r31, r1
     392:	80 81       	ld	r24, Z
     394:	81 11       	cpse	r24, r1
     396:	f5 cf       	rjmp	.-22     	; 0x382 <LcdConstInit+0x1e>
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	0b c0       	rjmp	.+22     	; 0x3b2 <LcdConstInit+0x4e>
     39c:	82 2f       	mov	r24, r18
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	f8 01       	movw	r30, r16
     3a2:	e8 0f       	add	r30, r24
     3a4:	f9 1f       	adc	r31, r25
     3a6:	30 81       	ld	r19, Z
     3a8:	fc 01       	movw	r30, r24
     3aa:	ec 53       	subi	r30, 0x3C	; 60
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	30 83       	st	Z, r19
     3b0:	2f 5f       	subi	r18, 0xFF	; 255
     3b2:	24 30       	cpi	r18, 0x04	; 4
     3b4:	98 f3       	brcs	.-26     	; 0x39c <LcdConstInit+0x38>
     3b6:	8a e0       	ldi	r24, 0x0A	; 10
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	39 d7       	rcall	.+3698   	; 0x122e <delayForMicroseconds>
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	08 95       	ret

000003c8 <LcdSendData>:
     3c8:	9b b1       	in	r25, 0x0b	; 11
     3ca:	97 7f       	andi	r25, 0xF7	; 247
     3cc:	9b b9       	out	0x0b, r25	; 11
     3ce:	9b b1       	in	r25, 0x0b	; 11
     3d0:	94 60       	ori	r25, 0x04	; 4
     3d2:	9b b9       	out	0x0b, r25	; 11
     3d4:	9b b1       	in	r25, 0x0b	; 11
     3d6:	90 64       	ori	r25, 0x40	; 64
     3d8:	9b b9       	out	0x0b, r25	; 11
     3da:	95 b1       	in	r25, 0x05	; 5
     3dc:	15 b8       	out	0x05, r1	; 5
     3de:	95 b1       	in	r25, 0x05	; 5
     3e0:	89 2b       	or	r24, r25
     3e2:	85 b9       	out	0x05, r24	; 5
     3e4:	8b b1       	in	r24, 0x0b	; 11
     3e6:	8f 7b       	andi	r24, 0xBF	; 191
     3e8:	8b b9       	out	0x0b, r24	; 11
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	2b c7       	rjmp	.+3670   	; 0x1246 <delayForMilliseconds>
     3f0:	08 95       	ret

000003f2 <LcdGoToPosition>:
     3f2:	84 30       	cpi	r24, 0x04	; 4
     3f4:	20 f0       	brcs	.+8      	; 0x3fe <LcdGoToPosition+0xc>
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fe:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     402:	64 31       	cpi	r22, 0x14	; 20
     404:	20 f0       	brcs	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     406:	83 e1       	ldi	r24, 0x13	; 19
     408:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40e:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <__data_end>
     412:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	ec 53       	subi	r30, 0x3C	; 60
     41a:	fe 4f       	sbci	r31, 0xFE	; 254
     41c:	90 81       	ld	r25, Z
     41e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     422:	89 0f       	add	r24, r25
     424:	80 68       	ori	r24, 0x80	; 128
     426:	8c cf       	rjmp	.-232    	; 0x340 <LcdSendCommand>
     428:	08 95       	ret

0000042a <LcdPrintChar>:
     42a:	cf 93       	push	r28
     42c:	c8 2f       	mov	r28, r24
     42e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     432:	84 31       	cpi	r24, 0x14	; 20
     434:	80 f0       	brcs	.+32     	; 0x456 <LcdPrintChar+0x2c>
     436:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     43a:	84 30       	cpi	r24, 0x04	; 4
     43c:	38 f0       	brcs	.+14     	; 0x44c <LcdPrintChar+0x22>
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	7f df       	rcall	.-258    	; 0x340 <LcdSendCommand>
     442:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     446:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <m_uchrCurrentLine>
     44a:	05 c0       	rjmp	.+10     	; 0x456 <LcdPrintChar+0x2c>
     44c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     456:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <__data_end>
     45a:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     45e:	c9 df       	rcall	.-110    	; 0x3f2 <LcdGoToPosition>
     460:	8c 2f       	mov	r24, r28
     462:	b2 df       	rcall	.-156    	; 0x3c8 <LcdSendData>
     464:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     468:	8f 5f       	subi	r24, 0xFF	; 255
     46a:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <LcdPrintCharDelay>:
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	18 2f       	mov	r17, r24
     47a:	eb 01       	movw	r28, r22
     47c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     480:	84 31       	cpi	r24, 0x14	; 20
     482:	80 f0       	brcs	.+32     	; 0x4a4 <LcdPrintCharDelay+0x32>
     484:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     488:	84 30       	cpi	r24, 0x04	; 4
     48a:	38 f0       	brcs	.+14     	; 0x49a <LcdPrintCharDelay+0x28>
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	58 df       	rcall	.-336    	; 0x340 <LcdSendCommand>
     490:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     494:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <m_uchrCurrentLine>
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <LcdPrintCharDelay+0x32>
     49a:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     4a4:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <__data_end>
     4a8:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     4ac:	a2 df       	rcall	.-188    	; 0x3f2 <LcdGoToPosition>
     4ae:	81 2f       	mov	r24, r17
     4b0:	8b df       	rcall	.-234    	; 0x3c8 <LcdSendData>
     4b2:	ce 01       	movw	r24, r28
     4b4:	bc d6       	rcall	.+3448   	; 0x122e <delayForMicroseconds>
     4b6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     4ba:	8f 5f       	subi	r24, 0xFF	; 255
     4bc:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	08 95       	ret

000004c8 <LcdPrintCharDelayAtPosition>:
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	f8 2e       	mov	r15, r24
     4d4:	d6 2f       	mov	r29, r22
     4d6:	c4 2f       	mov	r28, r20
     4d8:	89 01       	movw	r16, r18
     4da:	44 31       	cpi	r20, 0x14	; 20
     4dc:	80 f0       	brcs	.+32     	; 0x4fe <LcdPrintCharDelayAtPosition+0x36>
     4de:	64 30       	cpi	r22, 0x04	; 4
     4e0:	38 f0       	brcs	.+14     	; 0x4f0 <LcdPrintCharDelayAtPosition+0x28>
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	2d df       	rcall	.-422    	; 0x340 <LcdSendCommand>
     4e6:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     4ea:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <m_uchrCurrentLine>
     4ee:	07 c0       	rjmp	.+14     	; 0x4fe <LcdPrintCharDelayAtPosition+0x36>
     4f0:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     4f4:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     4f8:	8f 5f       	subi	r24, 0xFF	; 255
     4fa:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     4fe:	6c 2f       	mov	r22, r28
     500:	8d 2f       	mov	r24, r29
     502:	77 df       	rcall	.-274    	; 0x3f2 <LcdGoToPosition>
     504:	8f 2d       	mov	r24, r15
     506:	60 df       	rcall	.-320    	; 0x3c8 <LcdSendData>
     508:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     50c:	8f 5f       	subi	r24, 0xFF	; 255
     50e:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
     512:	c8 01       	movw	r24, r16
     514:	8c d6       	rcall	.+3352   	; 0x122e <delayForMicroseconds>
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	08 95       	ret

00000522 <LcdPrintString>:
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ec 01       	movw	r28, r24
     528:	02 c0       	rjmp	.+4      	; 0x52e <LcdPrintString+0xc>
     52a:	21 96       	adiw	r28, 0x01	; 1
     52c:	7e df       	rcall	.-260    	; 0x42a <LcdPrintChar>
     52e:	88 81       	ld	r24, Y
     530:	81 11       	cpse	r24, r1
     532:	fb cf       	rjmp	.-10     	; 0x52a <LcdPrintString+0x8>
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <LcdPerformCommand>:
     53a:	cf 93       	push	r28
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	fc 01       	movw	r30, r24
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	ed 31       	cpi	r30, 0x1D	; 29
     544:	f1 05       	cpc	r31, r1
     546:	08 f0       	brcs	.+2      	; 0x54a <LcdPerformCommand+0x10>
     548:	9c c0       	rjmp	.+312    	; 0x682 <LcdPerformCommand+0x148>
     54a:	ea 5b       	subi	r30, 0xBA	; 186
     54c:	ff 4f       	sbci	r31, 0xFF	; 255
     54e:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__tablejump2__>
     552:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     556:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <m_uchrCurrentLine>
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	f1 de       	rcall	.-542    	; 0x340 <LcdSendCommand>
     55e:	91 c0       	rjmp	.+290    	; 0x682 <LcdPerformCommand+0x148>
     560:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     56a:	43 df       	rcall	.-378    	; 0x3f2 <LcdGoToPosition>
     56c:	8a c0       	rjmp	.+276    	; 0x682 <LcdPerformCommand+0x148>
     56e:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     572:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <m_uchrCurrentLine>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	e3 de       	rcall	.-570    	; 0x340 <LcdSendCommand>
     57a:	83 c0       	rjmp	.+262    	; 0x682 <LcdPerformCommand+0x148>
     57c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     580:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <m_uchrCurrentLine>
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	dc de       	rcall	.-584    	; 0x340 <LcdSendCommand>
     588:	7c c0       	rjmp	.+248    	; 0x682 <LcdPerformCommand+0x148>
     58a:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
     58e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     592:	83 30       	cpi	r24, 0x03	; 3
     594:	20 f4       	brcc	.+8      	; 0x59e <LcdPerformCommand+0x64>
     596:	8f 5f       	subi	r24, 0xFF	; 255
     598:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     59c:	04 c0       	rjmp	.+8      	; 0x5a6 <LcdPerformCommand+0x6c>
     59e:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <m_uchrCurrentLine>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	cd de       	rcall	.-614    	; 0x340 <LcdSendCommand>
     5a6:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <__data_end>
     5aa:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     5ae:	21 df       	rcall	.-446    	; 0x3f2 <LcdGoToPosition>
     5b0:	68 c0       	rjmp	.+208    	; 0x682 <LcdPerformCommand+0x148>
     5b2:	84 e9       	ldi	r24, 0x94	; 148
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	b5 df       	rcall	.-150    	; 0x522 <LcdPrintString>
     5b8:	64 c0       	rjmp	.+200    	; 0x682 <LcdPerformCommand+0x148>
     5ba:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <m_uchrCurrentLine>
     5be:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <__data_end>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	16 df       	rcall	.-468    	; 0x3f2 <LcdGoToPosition>
     5c6:	5d c0       	rjmp	.+186    	; 0x682 <LcdPerformCommand+0x148>
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     5ce:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <__data_end>
     5d2:	0f df       	rcall	.-482    	; 0x3f2 <LcdGoToPosition>
     5d4:	56 c0       	rjmp	.+172    	; 0x682 <LcdPerformCommand+0x148>
     5d6:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     5da:	88 23       	and	r24, r24
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <LcdPerformCommand+0xa6>
     5de:	51 c0       	rjmp	.+162    	; 0x682 <LcdPerformCommand+0x148>
     5e0:	81 50       	subi	r24, 0x01	; 1
     5e2:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     5e6:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <__data_end>
     5ea:	03 df       	rcall	.-506    	; 0x3f2 <LcdGoToPosition>
     5ec:	4a c0       	rjmp	.+148    	; 0x682 <LcdPerformCommand+0x148>
     5ee:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     5f2:	83 30       	cpi	r24, 0x03	; 3
     5f4:	08 f0       	brcs	.+2      	; 0x5f8 <LcdPerformCommand+0xbe>
     5f6:	45 c0       	rjmp	.+138    	; 0x682 <LcdPerformCommand+0x148>
     5f8:	8f 5f       	subi	r24, 0xFF	; 255
     5fa:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     5fe:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <__data_end>
     602:	f7 de       	rcall	.-530    	; 0x3f2 <LcdGoToPosition>
     604:	3e c0       	rjmp	.+124    	; 0x682 <LcdPerformCommand+0x148>
     606:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     60a:	88 23       	and	r24, r24
     60c:	79 f0       	breq	.+30     	; 0x62c <LcdPerformCommand+0xf2>
     60e:	81 50       	subi	r24, 0x01	; 1
     610:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
     614:	80 e1       	ldi	r24, 0x10	; 16
     616:	94 de       	rcall	.-728    	; 0x340 <LcdSendCommand>
     618:	80 e2       	ldi	r24, 0x20	; 32
     61a:	07 df       	rcall	.-498    	; 0x42a <LcdPrintChar>
     61c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     620:	81 50       	subi	r24, 0x01	; 1
     622:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
     626:	80 e1       	ldi	r24, 0x10	; 16
     628:	8b de       	rcall	.-746    	; 0x340 <LcdSendCommand>
     62a:	2b c0       	rjmp	.+86     	; 0x682 <LcdPerformCommand+0x148>
     62c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     630:	88 23       	and	r24, r24
     632:	39 f1       	breq	.+78     	; 0x682 <LcdPerformCommand+0x148>
     634:	c3 e1       	ldi	r28, 0x13	; 19
     636:	c0 93 ba 01 	sts	0x01BA, r28	; 0x8001ba <__data_end>
     63a:	81 50       	subi	r24, 0x01	; 1
     63c:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     640:	63 e1       	ldi	r22, 0x13	; 19
     642:	d7 de       	rcall	.-594    	; 0x3f2 <LcdGoToPosition>
     644:	80 e2       	ldi	r24, 0x20	; 32
     646:	f1 de       	rcall	.-542    	; 0x42a <LcdPrintChar>
     648:	c0 93 ba 01 	sts	0x01BA, r28	; 0x8001ba <__data_end>
     64c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_uchrCurrentLine>
     650:	81 50       	subi	r24, 0x01	; 1
     652:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_uchrCurrentLine>
     656:	80 e1       	ldi	r24, 0x10	; 16
     658:	73 de       	rcall	.-794    	; 0x340 <LcdSendCommand>
     65a:	13 c0       	rjmp	.+38     	; 0x682 <LcdPerformCommand+0x148>
     65c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     660:	83 31       	cpi	r24, 0x13	; 19
     662:	78 f4       	brcc	.+30     	; 0x682 <LcdPerformCommand+0x148>
     664:	8f 5f       	subi	r24, 0xFF	; 255
     666:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
     66a:	84 e1       	ldi	r24, 0x14	; 20
     66c:	69 de       	rcall	.-814    	; 0x340 <LcdSendCommand>
     66e:	09 c0       	rjmp	.+18     	; 0x682 <LcdPerformCommand+0x148>
     670:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
     674:	88 23       	and	r24, r24
     676:	29 f0       	breq	.+10     	; 0x682 <LcdPerformCommand+0x148>
     678:	81 50       	subi	r24, 0x01	; 1
     67a:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
     67e:	80 e1       	ldi	r24, 0x10	; 16
     680:	5f de       	rcall	.-834    	; 0x340 <LcdSendCommand>
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <LcdSendByteDelay>:
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	eb 01       	movw	r28, r22
     68c:	80 32       	cpi	r24, 0x20	; 32
     68e:	10 f4       	brcc	.+4      	; 0x694 <LcdSendByteDelay+0xe>
     690:	54 df       	rcall	.-344    	; 0x53a <LcdPerformCommand>
     692:	01 c0       	rjmp	.+2      	; 0x696 <LcdSendByteDelay+0x10>
     694:	ca de       	rcall	.-620    	; 0x42a <LcdPrintChar>
     696:	ce 01       	movw	r24, r28
     698:	ca d5       	rcall	.+2964   	; 0x122e <delayForMicroseconds>
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <LcdPrintDelay>:
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	ec 01       	movw	r28, r24
     6aa:	8b 01       	movw	r16, r22
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <LcdPrintDelay+0x14>
     6ae:	21 96       	adiw	r28, 0x01	; 1
     6b0:	b8 01       	movw	r22, r16
     6b2:	e9 df       	rcall	.-46     	; 0x686 <LcdSendByteDelay>
     6b4:	88 81       	ld	r24, Y
     6b6:	81 11       	cpse	r24, r1
     6b8:	fa cf       	rjmp	.-12     	; 0x6ae <LcdPrintDelay+0xe>
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <LcdPrintDelayAtPosition>:
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	ec 01       	movw	r28, r24
     6ce:	86 2f       	mov	r24, r22
     6d0:	89 01       	movw	r16, r18
     6d2:	64 2f       	mov	r22, r20
     6d4:	8e de       	rcall	.-740    	; 0x3f2 <LcdGoToPosition>
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <LcdPrintDelayAtPosition+0x1a>
     6d8:	21 96       	adiw	r28, 0x01	; 1
     6da:	b8 01       	movw	r22, r16
     6dc:	d4 df       	rcall	.-88     	; 0x686 <LcdSendByteDelay>
     6de:	88 81       	ld	r24, Y
     6e0:	81 11       	cpse	r24, r1
     6e2:	fa cf       	rjmp	.-12     	; 0x6d8 <LcdPrintDelayAtPosition+0x14>
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	08 95       	ret

000006ee <LcdPrintNumericalByteDelayAtPosition>:
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <LcdPrintNumericalByteDelayAtPosition+0xc>
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	76 2f       	mov	r23, r22
     702:	79 01       	movw	r14, r18
     704:	39 e2       	ldi	r19, 0x29	; 41
     706:	83 9f       	mul	r24, r19
     708:	31 2d       	mov	r19, r1
     70a:	11 24       	eor	r1, r1
     70c:	32 95       	swap	r19
     70e:	3f 70       	andi	r19, 0x0F	; 15
     710:	9d ec       	ldi	r25, 0xCD	; 205
     712:	89 9f       	mul	r24, r25
     714:	21 2d       	mov	r18, r1
     716:	11 24       	eor	r1, r1
     718:	26 95       	lsr	r18
     71a:	26 95       	lsr	r18
     71c:	26 95       	lsr	r18
     71e:	29 9f       	mul	r18, r25
     720:	91 2d       	mov	r25, r1
     722:	11 24       	eor	r1, r1
     724:	96 95       	lsr	r25
     726:	96 95       	lsr	r25
     728:	96 95       	lsr	r25
     72a:	99 0f       	add	r25, r25
     72c:	59 2f       	mov	r21, r25
     72e:	55 0f       	add	r21, r21
     730:	55 0f       	add	r21, r21
     732:	95 0f       	add	r25, r21
     734:	52 2f       	mov	r21, r18
     736:	59 1b       	sub	r21, r25
     738:	95 2f       	mov	r25, r21
     73a:	22 0f       	add	r18, r18
     73c:	52 2f       	mov	r21, r18
     73e:	55 0f       	add	r21, r21
     740:	55 0f       	add	r21, r21
     742:	25 0f       	add	r18, r21
     744:	58 2f       	mov	r21, r24
     746:	52 1b       	sub	r21, r18
     748:	e0 e2       	ldi	r30, 0x20	; 32
     74a:	f0 e2       	ldi	r31, 0x20	; 32
     74c:	fa 83       	std	Y+2, r31	; 0x02
     74e:	e9 83       	std	Y+1, r30	; 0x01
     750:	33 23       	and	r19, r19
     752:	29 f0       	breq	.+10     	; 0x75e <LcdPrintNumericalByteDelayAtPosition+0x70>
     754:	30 5d       	subi	r19, 0xD0	; 208
     756:	90 5d       	subi	r25, 0xD0	; 208
     758:	39 83       	std	Y+1, r19	; 0x01
     75a:	9a 83       	std	Y+2, r25	; 0x02
     75c:	04 c0       	rjmp	.+8      	; 0x766 <LcdPrintNumericalByteDelayAtPosition+0x78>
     75e:	99 23       	and	r25, r25
     760:	11 f0       	breq	.+4      	; 0x766 <LcdPrintNumericalByteDelayAtPosition+0x78>
     762:	90 5d       	subi	r25, 0xD0	; 208
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	50 5d       	subi	r21, 0xD0	; 208
     768:	5b 83       	std	Y+3, r21	; 0x03
     76a:	64 2f       	mov	r22, r20
     76c:	87 2f       	mov	r24, r23
     76e:	41 de       	rcall	.-894    	; 0x3f2 <LcdGoToPosition>
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	0a c0       	rjmp	.+20     	; 0x788 <LcdPrintNumericalByteDelayAtPosition+0x9a>
     774:	e1 e0       	ldi	r30, 0x01	; 1
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	ec 0f       	add	r30, r28
     77a:	fd 1f       	adc	r31, r29
     77c:	e1 0f       	add	r30, r17
     77e:	f1 1d       	adc	r31, r1
     780:	b7 01       	movw	r22, r14
     782:	80 81       	ld	r24, Z
     784:	76 de       	rcall	.-788    	; 0x472 <LcdPrintCharDelay>
     786:	1f 5f       	subi	r17, 0xFF	; 255
     788:	13 30       	cpi	r17, 0x03	; 3
     78a:	a0 f3       	brcs	.-24     	; 0x774 <LcdPrintNumericalByteDelayAtPosition+0x86>
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	08 95       	ret

0000079e <LcdPrintNumericalShortDelayAtPosition>:
* \param uchrRow The row to print at
* \param uchrColumn The column to print at
* \param ushtDelayTime The time delay in between characters printed
*/
void LcdPrintNumericalShortDelayAtPosition(uint16_t numVal, unsigned char uchrRow, unsigned char uchrColumn, unsigned short ushtDelayTime)
{
     79e:	5f 92       	push	r5
     7a0:	6f 92       	push	r6
     7a2:	7f 92       	push	r7
     7a4:	8f 92       	push	r8
     7a6:	9f 92       	push	r9
     7a8:	af 92       	push	r10
     7aa:	bf 92       	push	r11
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	00 d0       	rcall	.+0      	; 0x7be <LcdPrintNumericalShortDelayAtPosition+0x20>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <LcdPrintNumericalShortDelayAtPosition+0x22>
     7c0:	1f 92       	push	r1
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	fc 01       	movw	r30, r24
     7c8:	56 2f       	mov	r21, r22
     7ca:	79 01       	movw	r14, r18
	//Variables
	uint8_t firstValue =  (numVal / 10000);
     7cc:	9c 01       	movw	r18, r24
     7ce:	32 95       	swap	r19
     7d0:	22 95       	swap	r18
     7d2:	2f 70       	andi	r18, 0x0F	; 15
     7d4:	23 27       	eor	r18, r19
     7d6:	3f 70       	andi	r19, 0x0F	; 15
     7d8:	23 27       	eor	r18, r19
     7da:	a7 e4       	ldi	r26, 0x47	; 71
     7dc:	b3 e0       	ldi	r27, 0x03	; 3
     7de:	74 d7       	rcall	.+3816   	; 0x16c8 <__umulhisi3>
     7e0:	4c 01       	movw	r8, r24
     7e2:	96 94       	lsr	r9
     7e4:	87 94       	ror	r8
     7e6:	96 94       	lsr	r9
     7e8:	87 94       	ror	r8
     7ea:	96 94       	lsr	r9
     7ec:	87 94       	ror	r8
	uint8_t secondValue = ((numVal / 1000) % 10);
     7ee:	5f 01       	movw	r10, r30
     7f0:	b6 94       	lsr	r11
     7f2:	a7 94       	ror	r10
     7f4:	b6 94       	lsr	r11
     7f6:	a7 94       	ror	r10
     7f8:	b6 94       	lsr	r11
     7fa:	a7 94       	ror	r10
     7fc:	95 01       	movw	r18, r10
     7fe:	a5 ec       	ldi	r26, 0xC5	; 197
     800:	b0 e2       	ldi	r27, 0x20	; 32
     802:	62 d7       	rcall	.+3780   	; 0x16c8 <__umulhisi3>
     804:	6c 01       	movw	r12, r24
     806:	d6 94       	lsr	r13
     808:	c7 94       	ror	r12
     80a:	d6 94       	lsr	r13
     80c:	c7 94       	ror	r12
     80e:	d6 94       	lsr	r13
     810:	c7 94       	ror	r12
     812:	d6 94       	lsr	r13
     814:	c7 94       	ror	r12
     816:	96 01       	movw	r18, r12
     818:	ad ec       	ldi	r26, 0xCD	; 205
     81a:	bc ec       	ldi	r27, 0xCC	; 204
     81c:	55 d7       	rcall	.+3754   	; 0x16c8 <__umulhisi3>
     81e:	8c 01       	movw	r16, r24
     820:	16 95       	lsr	r17
     822:	07 95       	ror	r16
     824:	16 95       	lsr	r17
     826:	07 95       	ror	r16
     828:	16 95       	lsr	r17
     82a:	07 95       	ror	r16
     82c:	c8 01       	movw	r24, r16
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	00 0f       	add	r16, r16
     834:	11 1f       	adc	r17, r17
     836:	00 0f       	add	r16, r16
     838:	11 1f       	adc	r17, r17
     83a:	00 0f       	add	r16, r16
     83c:	11 1f       	adc	r17, r17
     83e:	08 0f       	add	r16, r24
     840:	19 1f       	adc	r17, r25
     842:	c6 01       	movw	r24, r12
     844:	80 1b       	sub	r24, r16
     846:	91 0b       	sbc	r25, r17
     848:	8c 01       	movw	r16, r24
	uint8_t thirdValue =  ((numVal % 1000)/100);
     84a:	28 ee       	ldi	r18, 0xE8	; 232
     84c:	33 e0       	ldi	r19, 0x03	; 3
     84e:	c2 9e       	mul	r12, r18
     850:	c0 01       	movw	r24, r0
     852:	c3 9e       	mul	r12, r19
     854:	90 0d       	add	r25, r0
     856:	d2 9e       	mul	r13, r18
     858:	90 0d       	add	r25, r0
     85a:	11 24       	eor	r1, r1
     85c:	9f 01       	movw	r18, r30
     85e:	28 1b       	sub	r18, r24
     860:	39 0b       	sbc	r19, r25
     862:	36 95       	lsr	r19
     864:	27 95       	ror	r18
     866:	36 95       	lsr	r19
     868:	27 95       	ror	r18
     86a:	ab e7       	ldi	r26, 0x7B	; 123
     86c:	b4 e1       	ldi	r27, 0x14	; 20
     86e:	2c d7       	rcall	.+3672   	; 0x16c8 <__umulhisi3>
     870:	5c 01       	movw	r10, r24
     872:	b6 94       	lsr	r11
     874:	a7 94       	ror	r10
	uint8_t fourthValue = ((numVal % 100) / 10);
     876:	9f 01       	movw	r18, r30
     878:	36 95       	lsr	r19
     87a:	27 95       	ror	r18
     87c:	36 95       	lsr	r19
     87e:	27 95       	ror	r18
     880:	23 d7       	rcall	.+3654   	; 0x16c8 <__umulhisi3>
     882:	9c 01       	movw	r18, r24
     884:	36 95       	lsr	r19
     886:	27 95       	ror	r18
     888:	64 e6       	ldi	r22, 0x64	; 100
     88a:	62 9f       	mul	r22, r18
     88c:	c0 01       	movw	r24, r0
     88e:	63 9f       	mul	r22, r19
     890:	90 0d       	add	r25, r0
     892:	11 24       	eor	r1, r1
     894:	9f 01       	movw	r18, r30
     896:	28 1b       	sub	r18, r24
     898:	39 0b       	sbc	r19, r25
     89a:	ad ec       	ldi	r26, 0xCD	; 205
     89c:	bc ec       	ldi	r27, 0xCC	; 204
     89e:	14 d7       	rcall	.+3624   	; 0x16c8 <__umulhisi3>
     8a0:	6c 01       	movw	r12, r24
     8a2:	d6 94       	lsr	r13
     8a4:	c7 94       	ror	r12
     8a6:	d6 94       	lsr	r13
     8a8:	c7 94       	ror	r12
     8aa:	d6 94       	lsr	r13
	uint8_t fifthValue =  ((numVal % 10));
     8ac:	c7 94       	ror	r12
     8ae:	9f 01       	movw	r18, r30
     8b0:	0b d7       	rcall	.+3606   	; 0x16c8 <__umulhisi3>
     8b2:	96 95       	lsr	r25
     8b4:	87 95       	ror	r24
     8b6:	96 95       	lsr	r25
     8b8:	87 95       	ror	r24
     8ba:	96 95       	lsr	r25
     8bc:	87 95       	ror	r24
     8be:	9c 01       	movw	r18, r24
     8c0:	22 0f       	add	r18, r18
     8c2:	33 1f       	adc	r19, r19
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	82 0f       	add	r24, r18
     8d2:	93 1f       	adc	r25, r19
     8d4:	2e 2f       	mov	r18, r30
     8d6:	28 1b       	sub	r18, r24
     8d8:	82 2f       	mov	r24, r18
	
	char strToPrint[5] = {"     "};
     8da:	95 e0       	ldi	r25, 0x05	; 5
     8dc:	e6 e5       	ldi	r30, 0x56	; 86
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	de 01       	movw	r26, r28
     8e2:	11 96       	adiw	r26, 0x01	; 1
     8e4:	01 90       	ld	r0, Z+
     8e6:	0d 92       	st	X+, r0
     8e8:	9a 95       	dec	r25
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <LcdPrintNumericalShortDelayAtPosition+0x146>
	
	//Form the characters
	if(firstValue > 0)
     8ec:	88 20       	and	r8, r8
     8ee:	61 f0       	breq	.+24     	; 0x908 <LcdPrintNumericalShortDelayAtPosition+0x16a>
	{
		firstValue += (0x30);
     8f0:	90 e3       	ldi	r25, 0x30	; 48
     8f2:	98 0d       	add	r25, r8
		secondValue += (0x30);
     8f4:	00 5d       	subi	r16, 0xD0	; 208
		thirdValue += 0x30;
     8f6:	30 e3       	ldi	r19, 0x30	; 48
     8f8:	3a 0d       	add	r19, r10
		fourthValue += 0x30;
     8fa:	20 e3       	ldi	r18, 0x30	; 48
     8fc:	2c 0d       	add	r18, r12
		strToPrint[0] = (char)firstValue;
     8fe:	99 83       	std	Y+1, r25	; 0x01
		strToPrint[1] = (char)secondValue;
     900:	0a 83       	std	Y+2, r16	; 0x02
		strToPrint[2] = (char)thirdValue;
     902:	3b 83       	std	Y+3, r19	; 0x03
		strToPrint[3] = (char)fourthValue;
     904:	2c 83       	std	Y+4, r18	; 0x04
     906:	1a c0       	rjmp	.+52     	; 0x93c <LcdPrintNumericalShortDelayAtPosition+0x19e>
	}
	else if (secondValue > 0)
     908:	00 23       	and	r16, r16
     90a:	51 f0       	breq	.+20     	; 0x920 <LcdPrintNumericalShortDelayAtPosition+0x182>
	{
		secondValue += (0x30);
     90c:	90 e3       	ldi	r25, 0x30	; 48
     90e:	90 0f       	add	r25, r16
		thirdValue += 0x30;
     910:	30 e3       	ldi	r19, 0x30	; 48
     912:	3a 0d       	add	r19, r10
		fourthValue += 0x30;
     914:	20 e3       	ldi	r18, 0x30	; 48
     916:	2c 0d       	add	r18, r12
		strToPrint[1] = (char)secondValue;
     918:	9a 83       	std	Y+2, r25	; 0x02
		strToPrint[2] = (char)thirdValue;
     91a:	3b 83       	std	Y+3, r19	; 0x03
		strToPrint[3] = (char)fourthValue;
     91c:	2c 83       	std	Y+4, r18	; 0x04
     91e:	0e c0       	rjmp	.+28     	; 0x93c <LcdPrintNumericalShortDelayAtPosition+0x19e>
	}
	else if (thirdValue > 0)
     920:	aa 20       	and	r10, r10
     922:	39 f0       	breq	.+14     	; 0x932 <LcdPrintNumericalShortDelayAtPosition+0x194>
	{
		thirdValue += 0x30;
     924:	90 e3       	ldi	r25, 0x30	; 48
     926:	9a 0d       	add	r25, r10
		fourthValue += 0x30;
     928:	20 e3       	ldi	r18, 0x30	; 48
     92a:	2c 0d       	add	r18, r12
		strToPrint[2] = (char)thirdValue;
     92c:	9b 83       	std	Y+3, r25	; 0x03
		strToPrint[3] = (char)fourthValue;
     92e:	2c 83       	std	Y+4, r18	; 0x04
     930:	05 c0       	rjmp	.+10     	; 0x93c <LcdPrintNumericalShortDelayAtPosition+0x19e>
	}
	else if(fourthValue > 0)
     932:	cc 20       	and	r12, r12
     934:	19 f0       	breq	.+6      	; 0x93c <LcdPrintNumericalShortDelayAtPosition+0x19e>
	{
		fourthValue += 0x30;
     936:	90 e3       	ldi	r25, 0x30	; 48
		strToPrint[3] = (char)fourthValue;
     938:	9c 0d       	add	r25, r12
	}
	
	//Always print the last value, 0 or not
	fifthValue += 0x30;
     93a:	9c 83       	std	Y+4, r25	; 0x04
     93c:	e0 e3       	ldi	r30, 0x30	; 48
	strToPrint[4] = (char)fifthValue;
     93e:	e8 0f       	add	r30, r24
	
	LcdGoToPosition(uchrRow, uchrColumn);
     940:	ed 83       	std	Y+5, r30	; 0x05
     942:	64 2f       	mov	r22, r20
     944:	85 2f       	mov	r24, r21
     946:	55 dd       	rcall	.-1366   	; 0x3f2 <LcdGoToPosition>
	
	for(uint8_t i = 0; i < 5; i++)
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	0a c0       	rjmp	.+20     	; 0x960 <LcdPrintNumericalShortDelayAtPosition+0x1c2>
	{
		LcdPrintCharDelay(strToPrint[i],ushtDelayTime);	
     94c:	e1 e0       	ldi	r30, 0x01	; 1
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	ec 0f       	add	r30, r28
     952:	fd 1f       	adc	r31, r29
     954:	e1 0f       	add	r30, r17
     956:	f1 1d       	adc	r31, r1
     958:	b7 01       	movw	r22, r14
     95a:	80 81       	ld	r24, Z
     95c:	8a dd       	rcall	.-1260   	; 0x472 <LcdPrintCharDelay>
	fifthValue += 0x30;
	strToPrint[4] = (char)fifthValue;
	
	LcdGoToPosition(uchrRow, uchrColumn);
	
	for(uint8_t i = 0; i < 5; i++)
     95e:	1f 5f       	subi	r17, 0xFF	; 255
     960:	15 30       	cpi	r17, 0x05	; 5
     962:	a0 f3       	brcs	.-24     	; 0x94c <LcdPrintNumericalShortDelayAtPosition+0x1ae>
	{
		LcdPrintCharDelay(strToPrint[i],ushtDelayTime);	
	}
	
}
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	bf 90       	pop	r11
     980:	af 90       	pop	r10
     982:	9f 90       	pop	r9
     984:	8f 90       	pop	r8
     986:	7f 90       	pop	r7
     988:	6f 90       	pop	r6
     98a:	5f 90       	pop	r5
     98c:	08 95       	ret

0000098e <_Z13DisplaySplashv>:
/**
* \brief Displays the splash screen for the controller
*
*/
void DisplaySplash()
{
     98e:	cf 93       	push	r28
	//Clear the screen
	LcdClearScreen();
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	d3 dd       	rcall	.-1114   	; 0x53a <LcdPerformCommand>
	
	LcdCursorOff();
     994:	8c e0       	ldi	r24, 0x0C	; 12
     996:	d4 dc       	rcall	.-1624   	; 0x340 <LcdSendCommand>
	
	//Print design
	for(uint8_t i = 0; i < (LCD_ROW_COUNT * LCD_COLUMN_COUNT); i++)
     998:	c0 e0       	ldi	r28, 0x00	; 0
     99a:	c0 35       	cpi	r28, 0x50	; 80
     99c:	30 f4       	brcc	.+12     	; 0x9aa <_Z13DisplaySplashv+0x1c>
	{
		LcdPrintCharDelay('-',10000);
     99e:	60 e1       	ldi	r22, 0x10	; 16
     9a0:	77 e2       	ldi	r23, 0x27	; 39
     9a2:	8d e2       	ldi	r24, 0x2D	; 45
     9a4:	66 dd       	rcall	.-1332   	; 0x472 <LcdPrintCharDelay>
	LcdClearScreen();
	
	LcdCursorOff();
	
	//Print design
	for(uint8_t i = 0; i < (LCD_ROW_COUNT * LCD_COLUMN_COUNT); i++)
     9a6:	cf 5f       	subi	r28, 0xFF	; 255
		LcdPrintCharDelay('-',10000);
	}
	
	
	//Print at the appropriate location
	LcdGoToPosition(1,5);
     9a8:	f8 cf       	rjmp	.-16     	; 0x99a <_Z13DisplaySplashv+0xc>
     9aa:	65 e0       	ldi	r22, 0x05	; 5
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	21 dd       	rcall	.-1470   	; 0x3f2 <LcdGoToPosition>
	LcdPrintDelay("PWM 1",10000);
     9b0:	60 e1       	ldi	r22, 0x10	; 16
     9b2:	77 e2       	ldi	r23, 0x27	; 39
     9b4:	86 e6       	ldi	r24, 0x66	; 102
     9b6:	91 e0       	ldi	r25, 0x01	; 1
	LcdGoToPosition(2,8);
     9b8:	73 de       	rcall	.-794    	; 0x6a0 <LcdPrintDelay>
     9ba:	68 e0       	ldi	r22, 0x08	; 8
     9bc:	82 e0       	ldi	r24, 0x02	; 2
	LcdPrintDelay("Generator",10000);
     9be:	19 dd       	rcall	.-1486   	; 0x3f2 <LcdGoToPosition>
     9c0:	60 e1       	ldi	r22, 0x10	; 16
     9c2:	77 e2       	ldi	r23, 0x27	; 39
     9c4:	8c e6       	ldi	r24, 0x6C	; 108
     9c6:	91 e0       	ldi	r25, 0x01	; 1
	
	
	
	//Display module
	LcdGoToPosition(3,4);
     9c8:	6b de       	rcall	.-810    	; 0x6a0 <LcdPrintDelay>
     9ca:	64 e0       	ldi	r22, 0x04	; 4
     9cc:	83 e0       	ldi	r24, 0x03	; 3
	LcdPrintDelay("-Version 1.0-", 10000);
     9ce:	11 dd       	rcall	.-1502   	; 0x3f2 <LcdGoToPosition>
     9d0:	60 e1       	ldi	r22, 0x10	; 16
     9d2:	77 e2       	ldi	r23, 0x27	; 39
     9d4:	86 e7       	ldi	r24, 0x76	; 118
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	63 de       	rcall	.-826    	; 0x6a0 <LcdPrintDelay>
	delayForTenthSeconds(10);
     9da:	8a e0       	ldi	r24, 0x0A	; 10
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	42 d4       	rcall	.+2180   	; 0x1264 <delayForTenthSeconds>
	
	//Clear design in cool way
	LcdPrintDelayAtPosition("                    ",0,0,10000);
     9e0:	20 e1       	ldi	r18, 0x10	; 16
     9e2:	37 e2       	ldi	r19, 0x27	; 39
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	84 e8       	ldi	r24, 0x84	; 132
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	6b de       	rcall	.-810    	; 0x6c4 <LcdPrintDelayAtPosition>
	LcdPrintDelayAtPosition("                    ",3,0,10000);
     9ee:	20 e1       	ldi	r18, 0x10	; 16
     9f0:	37 e2       	ldi	r19, 0x27	; 39
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	63 e0       	ldi	r22, 0x03	; 3
     9f6:	84 e8       	ldi	r24, 0x84	; 132
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	64 de       	rcall	.-824    	; 0x6c4 <LcdPrintDelayAtPosition>
	LcdPrintDelayAtPosition("                    ",1,0,10000);
     9fc:	20 e1       	ldi	r18, 0x10	; 16
     9fe:	37 e2       	ldi	r19, 0x27	; 39
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	84 e8       	ldi	r24, 0x84	; 132
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	5d de       	rcall	.-838    	; 0x6c4 <LcdPrintDelayAtPosition>
	LcdPrintDelayAtPosition("                    ",2,0,10000);
     a0a:	20 e1       	ldi	r18, 0x10	; 16
     a0c:	37 e2       	ldi	r19, 0x27	; 39
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	62 e0       	ldi	r22, 0x02	; 2
     a12:	84 e8       	ldi	r24, 0x84	; 132
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	56 de       	rcall	.-852    	; 0x6c4 <LcdPrintDelayAtPosition>
	
	
	for(uint8_t i = 0; i < 4; i++)
     a18:	c0 e0       	ldi	r28, 0x00	; 0
     a1a:	c4 30       	cpi	r28, 0x04	; 4
     a1c:	68 f4       	brcc	.+26     	; 0xa38 <_Z13DisplaySplashv+0xaa>
	{
		LcdPrintDelayAtPosition(m_astrFastPwm1MainScreen[i],i,0,10000);
     a1e:	25 e1       	ldi	r18, 0x15	; 21
     a20:	c2 9f       	mul	r28, r18
     a22:	c0 01       	movw	r24, r0
     a24:	11 24       	eor	r1, r1
     a26:	20 e1       	ldi	r18, 0x10	; 16
     a28:	37 e2       	ldi	r19, 0x27	; 39
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	6c 2f       	mov	r22, r28
     a2e:	80 50       	subi	r24, 0x00	; 0
     a30:	9f 4f       	sbci	r25, 0xFF	; 255
     a32:	48 de       	rcall	.-880    	; 0x6c4 <LcdPrintDelayAtPosition>
     a34:	cf 5f       	subi	r28, 0xFF	; 255
	LcdPrintDelayAtPosition("                    ",3,0,10000);
	LcdPrintDelayAtPosition("                    ",1,0,10000);
	LcdPrintDelayAtPosition("                    ",2,0,10000);
	
	
	for(uint8_t i = 0; i < 4; i++)
     a36:	f1 cf       	rjmp	.-30     	; 0xa1a <_Z13DisplaySplashv+0x8c>
     a38:	cf 91       	pop	r28
	{
		LcdPrintDelayAtPosition(m_astrFastPwm1MainScreen[i],i,0,10000);
	}
}
     a3a:	08 95       	ret

00000a3c <_Z8Pwm1Initv>:
     a3c:	3f 92       	push	r3
/**
* \brief Initializes the PWM on Timer 1
*
*/
void Pwm1Init()
{
     a3e:	4f 92       	push	r4
     a40:	5f 92       	push	r5
     a42:	6f 92       	push	r6
     a44:	7f 92       	push	r7
     a46:	8f 92       	push	r8
     a48:	9f 92       	push	r9
     a4a:	af 92       	push	r10
     a4c:	bf 92       	push	r11
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <_Z8Pwm1Initv+0x24>
     a60:	00 d0       	rcall	.+0      	; 0xa62 <_Z8Pwm1Initv+0x26>
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
	//Setting to 0 in case timer 1 is already running
	TCCR1B = 0;
     a66:	01 e8       	ldi	r16, 0x81	; 129
     a68:	10 e0       	ldi	r17, 0x00	; 0
     a6a:	f8 01       	movw	r30, r16
     a6c:	10 82       	st	Z, r1
	
	//Make sure timer enabled in power register
	#if defined(PRR)
		PRR &= ~(1 << PRTIM1);
	#elif defined(PRR0)
		PRR0 &= ~(1 << PRTIM1);
     a6e:	e4 e6       	ldi	r30, 0x64	; 100
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	87 7f       	andi	r24, 0xF7	; 247
     a76:	80 83       	st	Z, r24
	#endif
	
	
	//Write the PWM output pins to low. Using OCR1 for PWM generation
	PIN_WRITE(OC1B_PIN,LOW,OUTPUT);
     a78:	8b b1       	in	r24, 0x0b	; 11
     a7a:	8f 7e       	andi	r24, 0xEF	; 239
     a7c:	8b b9       	out	0x0b, r24	; 11
     a7e:	8a b1       	in	r24, 0x0a	; 10
     a80:	80 61       	ori	r24, 0x10	; 16
     a82:	8a b9       	out	0x0a, r24	; 10
	PIN_WRITE(OC1A_PIN,LOW,OUTPUT);
     a84:	8b b1       	in	r24, 0x0b	; 11
     a86:	8f 7d       	andi	r24, 0xDF	; 223
     a88:	8b b9       	out	0x0b, r24	; 11
     a8a:	8a b1       	in	r24, 0x0a	; 10
     a8c:	80 62       	ori	r24, 0x20	; 32
     a8e:	8a b9       	out	0x0a, r24	; 10
	
	
	//Set prescaler 256
	m_udtTimer1.prescaler.cs0                    = 0;
     a90:	e2 ec       	ldi	r30, 0xC2	; 194
     a92:	f1 e0       	ldi	r31, 0x01	; 1
     a94:	80 81       	ld	r24, Z
     a96:	8e 7f       	andi	r24, 0xFE	; 254
     a98:	80 83       	st	Z, r24
	m_udtTimer1.prescaler.cs1                    = 0;
     a9a:	80 81       	ld	r24, Z
     a9c:	8d 7f       	andi	r24, 0xFD	; 253
     a9e:	80 83       	st	Z, r24
	m_udtTimer1.prescaler.cs2                    = 1;
     aa0:	80 81       	ld	r24, Z
     aa2:	84 60       	ori	r24, 0x04	; 4
     aa4:	80 83       	st	Z, r24
	
	//Set for pwm mode, FAST pwm with ICR1 as TOP
	m_udtTimer1.waveform.WGM0                    = 0;
     aa6:	e1 ec       	ldi	r30, 0xC1	; 193
     aa8:	f1 e0       	ldi	r31, 0x01	; 1
     aaa:	80 81       	ld	r24, Z
     aac:	8e 7f       	andi	r24, 0xFE	; 254
     aae:	80 83       	st	Z, r24
	m_udtTimer1.waveform.WGM1                    = 1;
     ab0:	80 81       	ld	r24, Z
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
	m_udtTimer1.waveform.WGM2                    = 1;
     ab6:	80 81       	ld	r24, Z
     ab8:	84 60       	ori	r24, 0x04	; 4
     aba:	80 83       	st	Z, r24
	m_udtTimer1.waveform.WGM3                    = 1;
     abc:	80 81       	ld	r24, Z
     abe:	88 60       	ori	r24, 0x08	; 8
     ac0:	80 83       	st	Z, r24
	
	//Set output modes
	m_udtTimer1.output_mode.comA			        = 2;
     ac2:	a0 ec       	ldi	r26, 0xC0	; 192
     ac4:	b1 e0       	ldi	r27, 0x01	; 1
     ac6:	8c 91       	ld	r24, X
     ac8:	8c 7f       	andi	r24, 0xFC	; 252
     aca:	82 60       	ori	r24, 0x02	; 2
     acc:	8c 93       	st	X, r24
	m_udtTimer1.output_mode.comB			        = 2;
     ace:	8c 91       	ld	r24, X
     ad0:	83 7f       	andi	r24, 0xF3	; 243
     ad2:	88 60       	ori	r24, 0x08	; 8
     ad4:	8c 93       	st	X, r24
	m_udtTimer1.output_mode.forceOutA	        = 0;
     ad6:	8c 91       	ld	r24, X
     ad8:	8f 7e       	andi	r24, 0xEF	; 239
     ada:	8c 93       	st	X, r24
	m_udtTimer1.output_mode.forceOutB	        = 0;
     adc:	8c 91       	ld	r24, X
     ade:	8f 7d       	andi	r24, 0xDF	; 223
     ae0:	8c 93       	st	X, r24
	
	//Set interrupts to none
	m_udtTimer1.interrupts.outputCompareMatchA	= 0;
     ae2:	83 ec       	ldi	r24, 0xC3	; 195
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	fc 01       	movw	r30, r24
     ae8:	30 80       	ld	r3, Z
     aea:	e8 94       	clt
     aec:	30 f8       	bld	r3, 0
     aee:	30 82       	st	Z, r3
	m_udtTimer1.interrupts.outputCompareMatchB	= 0;
     af0:	30 80       	ld	r3, Z
     af2:	e8 94       	clt
     af4:	31 f8       	bld	r3, 1
     af6:	30 82       	st	Z, r3
	m_udtTimer1.interrupts.overflow				= 0;
     af8:	30 80       	ld	r3, Z
     afa:	e8 94       	clt
     afc:	32 f8       	bld	r3, 2
     afe:	30 82       	st	Z, r3
	
	
	//Set frequency value
	ICR1 = 0;
     b00:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b04:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	//Set interrupts
	TIMSK1 = (m_udtTimer1.interrupts.outputCompareMatchA << OCIE1A | m_udtTimer1.interrupts.outputCompareMatchB << OCIE1B | m_udtTimer1.interrupts.overflow << TOIE1);
     b08:	30 80       	ld	r3, Z
     b0a:	30 fa       	bst	r3, 0
     b0c:	cc 24       	eor	r12, r12
     b0e:	c0 f8       	bld	r12, 0
     b10:	d1 2c       	mov	r13, r1
     b12:	cc 0c       	add	r12, r12
     b14:	dd 1c       	adc	r13, r13
     b16:	d0 80       	ld	r13, Z
     b18:	d1 fa       	bst	r13, 1
     b1a:	66 27       	eor	r22, r22
     b1c:	60 f9       	bld	r22, 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	66 0f       	add	r22, r22
     b22:	77 1f       	adc	r23, r23
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	80 81       	ld	r24, Z
     b2a:	82 fb       	bst	r24, 2
     b2c:	88 27       	eor	r24, r24
     b2e:	80 f9       	bld	r24, 0
     b30:	6c 29       	or	r22, r12
     b32:	68 2b       	or	r22, r24
     b34:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	//Setting force out bits
	TCCR1C = (m_udtTimer1.output_mode.forceOutA << FOC1A | m_udtTimer1.output_mode.forceOutB << FOC1B);
     b38:	8c 91       	ld	r24, X
     b3a:	84 fb       	bst	r24, 4
     b3c:	ee 24       	eor	r14, r14
     b3e:	e0 f8       	bld	r14, 0
     b40:	f1 2c       	mov	r15, r1
     b42:	f6 94       	lsr	r15
     b44:	fe 2c       	mov	r15, r14
     b46:	ee 24       	eor	r14, r14
     b48:	f7 94       	ror	r15
     b4a:	e7 94       	ror	r14
     b4c:	8c 91       	ld	r24, X
     b4e:	85 fb       	bst	r24, 5
     b50:	44 27       	eor	r20, r20
     b52:	40 f9       	bld	r20, 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	00 24       	eor	r0, r0
     b58:	56 95       	lsr	r21
     b5a:	47 95       	ror	r20
     b5c:	07 94       	ror	r0
     b5e:	56 95       	lsr	r21
     b60:	47 95       	ror	r20
     b62:	07 94       	ror	r0
     b64:	54 2f       	mov	r21, r20
     b66:	40 2d       	mov	r20, r0
     b68:	e4 2a       	or	r14, r20
     b6a:	e0 92 82 00 	sts	0x0082, r14	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	//Setting output mode
	TCCR1A = (m_udtTimer1.output_mode.comA << COM1A0 | m_udtTimer1.output_mode.comB << COM1B0);
     b6e:	8c 91       	ld	r24, X
     b70:	83 70       	andi	r24, 0x03	; 3
     b72:	f0 e4       	ldi	r31, 0x40	; 64
     b74:	8f 9f       	mul	r24, r31
     b76:	c0 01       	movw	r24, r0
     b78:	11 24       	eor	r1, r1
     b7a:	4c 91       	ld	r20, X
     b7c:	46 95       	lsr	r20
     b7e:	46 95       	lsr	r20
     b80:	43 70       	andi	r20, 0x03	; 3
     b82:	20 e1       	ldi	r18, 0x10	; 16
     b84:	42 9f       	mul	r20, r18
     b86:	a0 01       	movw	r20, r0
     b88:	11 24       	eor	r1, r1
     b8a:	84 2b       	or	r24, r20
     b8c:	a0 e8       	ldi	r26, 0x80	; 128
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	8c 93       	st	X, r24
	
	//Setting waveform bits
	TCCR1A |= (m_udtTimer1.waveform.WGM0 << WGM10 | m_udtTimer1.waveform.WGM1 << WGM11);
     b92:	e1 ec       	ldi	r30, 0xC1	; 193
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	80 81       	ld	r24, Z
     b98:	80 fb       	bst	r24, 0
     b9a:	aa 24       	eor	r10, r10
     b9c:	a0 f8       	bld	r10, 0
     b9e:	b1 2c       	mov	r11, r1
     ba0:	80 81       	ld	r24, Z
     ba2:	81 fb       	bst	r24, 1
     ba4:	22 27       	eor	r18, r18
     ba6:	20 f9       	bld	r18, 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	22 0f       	add	r18, r18
     bac:	33 1f       	adc	r19, r19
     bae:	8c 91       	ld	r24, X
     bb0:	2a 29       	or	r18, r10
     bb2:	3b 29       	or	r19, r11
     bb4:	28 2b       	or	r18, r24
     bb6:	2c 93       	st	X, r18
	TCCR1B = (m_udtTimer1.waveform.WGM2 << WGM12 | m_udtTimer1.waveform.WGM3 << WGM13);
     bb8:	80 81       	ld	r24, Z
     bba:	82 fb       	bst	r24, 2
     bbc:	88 24       	eor	r8, r8
     bbe:	80 f8       	bld	r8, 0
     bc0:	91 2c       	mov	r9, r1
     bc2:	88 0c       	add	r8, r8
     bc4:	99 1c       	adc	r9, r9
     bc6:	88 0c       	add	r8, r8
     bc8:	99 1c       	adc	r9, r9
     bca:	88 0c       	add	r8, r8
     bcc:	99 1c       	adc	r9, r9
     bce:	80 81       	ld	r24, Z
     bd0:	83 fb       	bst	r24, 3
     bd2:	66 24       	eor	r6, r6
     bd4:	60 f8       	bld	r6, 0
     bd6:	71 2c       	mov	r7, r1
     bd8:	66 0c       	add	r6, r6
     bda:	77 1c       	adc	r7, r7
     bdc:	66 0c       	add	r6, r6
     bde:	77 1c       	adc	r7, r7
     be0:	66 0c       	add	r6, r6
     be2:	77 1c       	adc	r7, r7
     be4:	66 0c       	add	r6, r6
     be6:	77 1c       	adc	r7, r7
     be8:	68 28       	or	r6, r8
     bea:	f8 01       	movw	r30, r16
     bec:	60 82       	st	Z, r6
	
	//Setting initial duty cycle to 0
	PwmOCR1A_SetDutyCycle(0);
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	88 da       	rcall	.-2800   	; 0x104 <PwmOCR1A_SetDutyCycle>
	PwmOCR1B_SetDutyCycle(0);
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	92 da       	rcall	.-2780   	; 0x11e <PwmOCR1B_SetDutyCycle>
	
	
	
	//Setting m_uchrPrescaler to start timer. We will keep it running and control PWM output through duty cycle settings alone
	TCCR1B |= (m_udtTimer1.prescaler.cs0 << CS10 | m_udtTimer1.prescaler.cs1 << CS11 | m_udtTimer1.prescaler.cs2 << CS12);
     bfa:	e2 ec       	ldi	r30, 0xC2	; 194
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	80 81       	ld	r24, Z
     c00:	81 70       	andi	r24, 0x01	; 1
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	1a 82       	std	Y+2, r1	; 0x02
     c06:	80 81       	ld	r24, Z
     c08:	81 fb       	bst	r24, 1
     c0a:	44 24       	eor	r4, r4
     c0c:	40 f8       	bld	r4, 0
     c0e:	51 2c       	mov	r5, r1
     c10:	44 0c       	add	r4, r4
     c12:	55 1c       	adc	r5, r5
     c14:	29 81       	ldd	r18, Y+1	; 0x01
     c16:	3a 81       	ldd	r19, Y+2	; 0x02
     c18:	24 29       	or	r18, r4
     c1a:	35 29       	or	r19, r5
     c1c:	80 81       	ld	r24, Z
     c1e:	82 fb       	bst	r24, 2
     c20:	88 27       	eor	r24, r24
     c22:	80 f9       	bld	r24, 0
     c24:	8b 83       	std	Y+3, r24	; 0x03
     c26:	1c 82       	std	Y+4, r1	; 0x04
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	f8 01       	movw	r30, r16
     c36:	40 81       	ld	r20, Z
     c38:	29 01       	movw	r4, r18
     c3a:	48 2a       	or	r4, r24
     c3c:	59 2a       	or	r5, r25
     c3e:	44 2a       	or	r4, r20
     c40:	40 82       	st	Z, r4
	
}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	9f 90       	pop	r9
     c60:	8f 90       	pop	r8
     c62:	7f 90       	pop	r7
     c64:	6f 90       	pop	r6
     c66:	5f 90       	pop	r5
     c68:	4f 90       	pop	r4
     c6a:	3f 90       	pop	r3
     c6c:	08 95       	ret

00000c6e <_Z14Initializationv>:
*
*/
void Initialization()
{
	//Reset pins
	PORTA = 0;
     c6e:	12 b8       	out	0x02, r1	; 2
	PORTB = 0;
     c70:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
     c72:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
     c74:	1b b8       	out	0x0b, r1	; 11
	DDRA = FULL_OUTPUT;
     c76:	8f ef       	ldi	r24, 0xFF	; 255
     c78:	81 b9       	out	0x01, r24	; 1
	DDRB = FULL_OUTPUT;
     c7a:	84 b9       	out	0x04, r24	; 4
	DDRC = FULL_OUTPUT;
     c7c:	87 b9       	out	0x07, r24	; 7
	DDRD = FULL_OUTPUT;
     c7e:	8a b9       	out	0x0a, r24	; 10
	
	
	
	//Initialize the display
	LcdConstInit(m_uchrStandardStartupValues, m_uchrCFAH2004LineStartAddresses);
     c80:	6c ea       	ldi	r22, 0xAC	; 172
     c82:	71 e0       	ldi	r23, 0x01	; 1
     c84:	80 eb       	ldi	r24, 0xB0	; 176
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	6d db       	rcall	.-2342   	; 0x364 <LcdConstInit>
	
	//Display the splash screen
	DisplaySplash();
     c8a:	81 de       	rcall	.-766    	; 0x98e <_Z13DisplaySplashv>
     c8c:	81 b1       	in	r24, 0x01	; 1
	
	//Initialize the ADC
	DDRA &= ~(1 << PWM_1_A_ADC_CHANNEL | 1 << PWM_1_B_ADC_CHANNEL | 1 << PWM_1_FREQ_ADC_CHANNEL); //Input
     c8e:	8f 71       	andi	r24, 0x1F	; 31
     c90:	81 b9       	out	0x01, r24	; 1
     c92:	ec e7       	ldi	r30, 0x7C	; 124
	
	ADC_adjust_right(); //Right justify results
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8f 7d       	andi	r24, 0xDF	; 223
     c9a:	80 83       	st	Z, r24
     c9c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ADCSRB = (0x00 << ADTS0); //Free running mode
     ca0:	10 82       	st	Z, r1
	ADMUX = ADC_REF_MODE_1; //Set admux mode
     ca2:	ea e7       	ldi	r30, 0x7A	; 122
	ADC_enable(); //Turn on ADC
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 68       	ori	r24, 0x80	; 128
     caa:	80 83       	st	Z, r24
	
	//Initialize the PWM
	Pwm1Init();
     cac:	c7 ce       	rjmp	.-626    	; 0xa3c <_Z8Pwm1Initv>
     cae:	08 95       	ret

00000cb0 <_Z18Pwm1A_SetDutyCycleh>:
     cb0:	68 2f       	mov	r22, r24
	
	
}
void Pwm1A_SetDutyCycle(uint8_t percentage)
{
	if(percentage > 100)
     cb2:	85 36       	cpi	r24, 0x65	; 101
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <_Z18Pwm1A_SetDutyCycleh+0x8>
	{
		percentage = 100;
     cb6:	64 e6       	ldi	r22, 0x64	; 100
	}
	
	m_ushtPwm1ADutyCycleValue = (ConvertPercentage(m_ushtTimer1FrequencyValue,percentage));
     cb8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <m_ushtTimer1FrequencyValue>
     cbc:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	27 d3       	rcall	.+1614   	; 0x1312 <ConvertPercentage>
     cc4:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <m_ushtPwm1ADutyCycleValue+0x1>
     cc8:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <m_ushtPwm1ADutyCycleValue>
	
	PwmOCR1A_SetDutyCycle(m_ushtPwm1ADutyCycleValue);
     ccc:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <m_ushtPwm1ADutyCycleValue>
     cd0:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <m_ushtPwm1ADutyCycleValue+0x1>
     cd4:	17 ca       	rjmp	.-3026   	; 0x104 <PwmOCR1A_SetDutyCycle>
     cd6:	08 95       	ret

00000cd8 <_Z18Pwm1B_SetDutyCycleh>:
	
	
	
}
void Pwm1B_SetDutyCycle(uint8_t percentage)
{
     cd8:	68 2f       	mov	r22, r24
	if(percentage > 100)
     cda:	85 36       	cpi	r24, 0x65	; 101
     cdc:	08 f0       	brcs	.+2      	; 0xce0 <_Z18Pwm1B_SetDutyCycleh+0x8>
	{
		percentage = 100;
     cde:	64 e6       	ldi	r22, 0x64	; 100
	}
	
	
	m_ushtPwm1BDutyCycleValue = (ConvertPercentage(m_ushtTimer1FrequencyValue,percentage));
     ce0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <m_ushtTimer1FrequencyValue>
     ce4:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	13 d3       	rcall	.+1574   	; 0x1312 <ConvertPercentage>
     cec:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <m_ushtPwm1BDutyCycleValue+0x1>
     cf0:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <m_ushtPwm1BDutyCycleValue>
	PwmOCR1B_SetDutyCycle(m_ushtPwm1BDutyCycleValue);
     cf4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <m_ushtPwm1BDutyCycleValue>
     cf8:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <m_ushtPwm1BDutyCycleValue+0x1>
     cfc:	10 ca       	rjmp	.-3040   	; 0x11e <PwmOCR1B_SetDutyCycle>
     cfe:	08 95       	ret

00000d00 <_Z11Pwm1SetFreqj>:
}



void Pwm1SetFreq(uint16_t inHertz)
{
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	9c 01       	movw	r18, r24
	{
		inHertz = PWM_1_MAX_HZ;
	}
	
	//m_ushtTimer1FrequencyValue = PWM_1_CALC_TOP(inHertz);
	TCCR1B &= ~(1 << CS10 | 1 << CS11 | 1 << CS12);
     d0e:	e1 e8       	ldi	r30, 0x81	; 129
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	90 81       	ld	r25, Z
     d14:	98 7f       	andi	r25, 0xF8	; 248
     d16:	90 83       	st	Z, r25
	
	if(inHertz >= 5000)
     d18:	28 38       	cpi	r18, 0x88	; 136
     d1a:	83 e1       	ldi	r24, 0x13	; 19
     d1c:	38 07       	cpc	r19, r24
     d1e:	c8 f0       	brcs	.+50     	; 0xd52 <_Z11Pwm1SetFreqj+0x52>
	{
		//Set prescaler 1
		m_udtTimer1.prescaler.cs0                    = 1;
     d20:	e2 ec       	ldi	r30, 0xC2	; 194
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	80 81       	ld	r24, Z
     d26:	81 60       	ori	r24, 0x01	; 1
     d28:	80 83       	st	Z, r24
		m_udtTimer1.prescaler.cs1                    = 0;
     d2a:	80 81       	ld	r24, Z
     d2c:	8d 7f       	andi	r24, 0xFD	; 253
     d2e:	80 83       	st	Z, r24
		m_udtTimer1.prescaler.cs2                    = 0;
     d30:	80 81       	ld	r24, Z
     d32:	8b 7f       	andi	r24, 0xFB	; 251
     d34:	80 83       	st	Z, r24
//Variables
//-----------------------------------------------------------------------------------------------------------------------------------------

inline uint16_t CalculatePwmFreq(uint16_t prescaler, uint16_t hertz)
{
	return (F_CPU / (prescaler * ( 1 + hertz)));
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	7b e1       	ldi	r23, 0x1B	; 27
     d42:	87 eb       	ldi	r24, 0xB7	; 183
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	95 d4       	rcall	.+2346   	; 0x1672 <__udivmodsi4>
		//Set prescaler 1
		m_udtTimer1.prescaler.cs0                    = 1;
		m_udtTimer1.prescaler.cs1                    = 0;
		m_udtTimer1.prescaler.cs2                    = 0;
		
		m_ushtTimer1FrequencyValue = CalculatePwmFreq(1,inHertz);
     d48:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     d4c:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <m_ushtTimer1FrequencyValue>
     d50:	82 c0       	rjmp	.+260    	; 0xe56 <_Z11Pwm1SetFreqj+0x156>
	}
	else if(inHertz >= 1000)
     d52:	28 3e       	cpi	r18, 0xE8	; 232
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	38 07       	cpc	r19, r24
     d58:	f8 f0       	brcs	.+62     	; 0xd98 <_Z11Pwm1SetFreqj+0x98>
	{
		//Set prescaler 8
		m_udtTimer1.prescaler.cs0                    = 0;
     d5a:	e2 ec       	ldi	r30, 0xC2	; 194
     d5c:	f1 e0       	ldi	r31, 0x01	; 1
     d5e:	80 81       	ld	r24, Z
     d60:	8e 7f       	andi	r24, 0xFE	; 254
     d62:	80 83       	st	Z, r24
		m_udtTimer1.prescaler.cs1                    = 1;
     d64:	80 81       	ld	r24, Z
     d66:	82 60       	ori	r24, 0x02	; 2
     d68:	80 83       	st	Z, r24
		m_udtTimer1.prescaler.cs2                    = 0;
     d6a:	80 81       	ld	r24, Z
     d6c:	8b 7f       	andi	r24, 0xFB	; 251
     d6e:	80 83       	st	Z, r24
//Variables
//-----------------------------------------------------------------------------------------------------------------------------------------

inline uint16_t CalculatePwmFreq(uint16_t prescaler, uint16_t hertz)
{
	return (F_CPU / (prescaler * ( 1 + hertz)));
     d70:	2f 5f       	subi	r18, 0xFF	; 255
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
     d74:	22 0f       	add	r18, r18
     d76:	33 1f       	adc	r19, r19
     d78:	22 0f       	add	r18, r18
     d7a:	33 1f       	adc	r19, r19
     d7c:	22 0f       	add	r18, r18
     d7e:	33 1f       	adc	r19, r19
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	7b e1       	ldi	r23, 0x1B	; 27
     d88:	87 eb       	ldi	r24, 0xB7	; 183
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	72 d4       	rcall	.+2276   	; 0x1672 <__udivmodsi4>
		//Set prescaler 8
		m_udtTimer1.prescaler.cs0                    = 0;
		m_udtTimer1.prescaler.cs1                    = 1;
		m_udtTimer1.prescaler.cs2                    = 0;
		
		m_ushtTimer1FrequencyValue = CalculatePwmFreq(8,inHertz);
     d8e:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     d92:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <m_ushtTimer1FrequencyValue>
     d96:	5f c0       	rjmp	.+190    	; 0xe56 <_Z11Pwm1SetFreqj+0x156>
	}
	else if(inHertz >= 200)
     d98:	28 3c       	cpi	r18, 0xC8	; 200
     d9a:	31 05       	cpc	r19, r1
     d9c:	10 f1       	brcs	.+68     	; 0xde2 <_Z11Pwm1SetFreqj+0xe2>
	{
		//Set prescaler 64
		m_udtTimer1.prescaler.cs0                    = 1;
     d9e:	e2 ec       	ldi	r30, 0xC2	; 194
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	80 81       	ld	r24, Z
     da4:	81 60       	ori	r24, 0x01	; 1
     da6:	80 83       	st	Z, r24
		m_udtTimer1.prescaler.cs1                    = 1;
     da8:	80 81       	ld	r24, Z
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	80 83       	st	Z, r24
		m_udtTimer1.prescaler.cs2                    = 0;
     dae:	80 81       	ld	r24, Z
     db0:	8b 7f       	andi	r24, 0xFB	; 251
     db2:	80 83       	st	Z, r24
//Variables
//-----------------------------------------------------------------------------------------------------------------------------------------

inline uint16_t CalculatePwmFreq(uint16_t prescaler, uint16_t hertz)
{
	return (F_CPU / (prescaler * ( 1 + hertz)));
     db4:	2f 5f       	subi	r18, 0xFF	; 255
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	00 24       	eor	r0, r0
     dba:	36 95       	lsr	r19
     dbc:	27 95       	ror	r18
     dbe:	07 94       	ror	r0
     dc0:	36 95       	lsr	r19
     dc2:	27 95       	ror	r18
     dc4:	07 94       	ror	r0
     dc6:	32 2f       	mov	r19, r18
     dc8:	20 2d       	mov	r18, r0
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	7b e1       	ldi	r23, 0x1B	; 27
     dd2:	87 eb       	ldi	r24, 0xB7	; 183
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	4d d4       	rcall	.+2202   	; 0x1672 <__udivmodsi4>
		//Set prescaler 64
		m_udtTimer1.prescaler.cs0                    = 1;
		m_udtTimer1.prescaler.cs1                    = 1;
		m_udtTimer1.prescaler.cs2                    = 0;
		
		m_ushtTimer1FrequencyValue = CalculatePwmFreq(64,inHertz);
     dd8:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     ddc:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <m_ushtTimer1FrequencyValue>
     de0:	3a c0       	rjmp	.+116    	; 0xe56 <_Z11Pwm1SetFreqj+0x156>
	}
	else if(inHertz >= 50)
     de2:	22 33       	cpi	r18, 0x32	; 50
     de4:	31 05       	cpc	r19, r1
     de6:	d8 f0       	brcs	.+54     	; 0xe1e <_Z11Pwm1SetFreqj+0x11e>
	{
		//Set prescaler 256
		m_udtTimer1.prescaler.cs0                    = 0;
     de8:	e2 ec       	ldi	r30, 0xC2	; 194
     dea:	f1 e0       	ldi	r31, 0x01	; 1
     dec:	80 81       	ld	r24, Z
     dee:	8e 7f       	andi	r24, 0xFE	; 254
     df0:	80 83       	st	Z, r24
		m_udtTimer1.prescaler.cs1                    = 0;
     df2:	80 81       	ld	r24, Z
     df4:	8d 7f       	andi	r24, 0xFD	; 253
     df6:	80 83       	st	Z, r24
		m_udtTimer1.prescaler.cs2                    = 1;
     df8:	80 81       	ld	r24, Z
     dfa:	84 60       	ori	r24, 0x04	; 4
     dfc:	80 83       	st	Z, r24
//Variables
//-----------------------------------------------------------------------------------------------------------------------------------------

inline uint16_t CalculatePwmFreq(uint16_t prescaler, uint16_t hertz)
{
	return (F_CPU / (prescaler * ( 1 + hertz)));
     dfe:	2f 5f       	subi	r18, 0xFF	; 255
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	32 2f       	mov	r19, r18
     e04:	22 27       	eor	r18, r18
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	7b e1       	ldi	r23, 0x1B	; 27
     e0e:	87 eb       	ldi	r24, 0xB7	; 183
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	2f d4       	rcall	.+2142   	; 0x1672 <__udivmodsi4>
		//Set prescaler 256
		m_udtTimer1.prescaler.cs0                    = 0;
		m_udtTimer1.prescaler.cs1                    = 0;
		m_udtTimer1.prescaler.cs2                    = 1;
		
		m_ushtTimer1FrequencyValue = CalculatePwmFreq(256,inHertz);
     e14:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     e18:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <m_ushtTimer1FrequencyValue>
     e1c:	1c c0       	rjmp	.+56     	; 0xe56 <_Z11Pwm1SetFreqj+0x156>
	}
	else
	{
		//Set prescaler 1024
		m_udtTimer1.prescaler.cs0                    = 1;
     e1e:	e2 ec       	ldi	r30, 0xC2	; 194
     e20:	f1 e0       	ldi	r31, 0x01	; 1
     e22:	80 81       	ld	r24, Z
     e24:	81 60       	ori	r24, 0x01	; 1
     e26:	80 83       	st	Z, r24
		m_udtTimer1.prescaler.cs1                    = 0;
     e28:	80 81       	ld	r24, Z
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	80 83       	st	Z, r24
		m_udtTimer1.prescaler.cs2                    = 1;
     e2e:	80 81       	ld	r24, Z
     e30:	84 60       	ori	r24, 0x04	; 4
     e32:	80 83       	st	Z, r24
//Variables
//-----------------------------------------------------------------------------------------------------------------------------------------

inline uint16_t CalculatePwmFreq(uint16_t prescaler, uint16_t hertz)
{
	return (F_CPU / (prescaler * ( 1 + hertz)));
     e34:	2f 5f       	subi	r18, 0xFF	; 255
     e36:	3f 4f       	sbci	r19, 0xFF	; 255
     e38:	32 2f       	mov	r19, r18
     e3a:	22 27       	eor	r18, r18
     e3c:	33 0f       	add	r19, r19
     e3e:	33 0f       	add	r19, r19
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	7b e1       	ldi	r23, 0x1B	; 27
     e48:	87 eb       	ldi	r24, 0xB7	; 183
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	12 d4       	rcall	.+2084   	; 0x1672 <__udivmodsi4>
		//Set prescaler 1024
		m_udtTimer1.prescaler.cs0                    = 1;
		m_udtTimer1.prescaler.cs1                    = 0;
		m_udtTimer1.prescaler.cs2                    = 1;
		
		m_ushtTimer1FrequencyValue = CalculatePwmFreq(1024,inHertz);
     e4e:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     e52:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <m_ushtTimer1FrequencyValue>
	}
	
	
	ICR1 = m_ushtTimer1FrequencyValue;
     e56:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <m_ushtTimer1FrequencyValue>
     e5a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     e5e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e62:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCCR1B |= (m_udtTimer1.prescaler.cs0 << CS10 | m_udtTimer1.prescaler.cs1 << CS11 | m_udtTimer1.prescaler.cs2 << CS12);
     e66:	e2 ec       	ldi	r30, 0xC2	; 194
     e68:	f1 e0       	ldi	r31, 0x01	; 1
     e6a:	80 81       	ld	r24, Z
     e6c:	08 2f       	mov	r16, r24
     e6e:	01 70       	andi	r16, 0x01	; 1
     e70:	10 e0       	ldi	r17, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	81 fb       	bst	r24, 1
     e76:	ee 24       	eor	r14, r14
     e78:	e0 f8       	bld	r14, 0
     e7a:	f1 2c       	mov	r15, r1
     e7c:	c7 01       	movw	r24, r14
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	a8 01       	movw	r20, r16
     e84:	48 2b       	or	r20, r24
     e86:	59 2b       	or	r21, r25
     e88:	80 81       	ld	r24, Z
     e8a:	82 fb       	bst	r24, 2
     e8c:	88 27       	eor	r24, r24
     e8e:	80 f9       	bld	r24, 0
     e90:	c8 2f       	mov	r28, r24
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	d8 2f       	mov	r29, r24
     e96:	9e 01       	movw	r18, r28
     e98:	22 0f       	add	r18, r18
     e9a:	33 1f       	adc	r19, r19
     e9c:	22 0f       	add	r18, r18
     e9e:	33 1f       	adc	r19, r19
     ea0:	e1 e8       	ldi	r30, 0x81	; 129
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	60 81       	ld	r22, Z
     ea6:	ca 01       	movw	r24, r20
     ea8:	82 2b       	or	r24, r18
     eaa:	93 2b       	or	r25, r19
     eac:	86 2b       	or	r24, r22
     eae:	80 83       	st	Z, r24
	Pwm1A_SetDutyCycle((ConvertRangeToPercentage(0,m_ushtTimer1FrequencyValue,m_ushtPwm1ADutyCycleValue)));
     eb0:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <m_ushtPwm1ADutyCycleValue>
     eb4:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <m_ushtPwm1ADutyCycleValue+0x1>
     eb8:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <m_ushtTimer1FrequencyValue>
     ebc:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	e1 d1       	rcall	.+962    	; 0x1288 <ConvertRangeToPercentage>
     ec6:	f4 de       	rcall	.-536    	; 0xcb0 <_Z18Pwm1A_SetDutyCycleh>
	Pwm1B_SetDutyCycle((ConvertRangeToPercentage(0,m_ushtTimer1FrequencyValue,m_ushtPwm1BDutyCycleValue)));
     ec8:	40 91 bc 01 	lds	r20, 0x01BC	; 0x8001bc <m_ushtPwm1BDutyCycleValue>
     ecc:	50 91 bd 01 	lds	r21, 0x01BD	; 0x8001bd <m_ushtPwm1BDutyCycleValue+0x1>
     ed0:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <m_ushtTimer1FrequencyValue>
     ed4:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	d5 d1       	rcall	.+938    	; 0x1288 <ConvertRangeToPercentage>
     ede:	fc de       	rcall	.-520    	; 0xcd8 <_Z18Pwm1B_SetDutyCycleh>
	
	LcdPrintNumericalByteDelayAtPosition((ConvertRangeToPercentage(0,m_ushtTimer1FrequencyValue,m_ushtPwm1ADutyCycleValue)),2,14,50000);
     ee0:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <m_ushtPwm1ADutyCycleValue>
     ee4:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <m_ushtPwm1ADutyCycleValue+0x1>
     ee8:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <m_ushtTimer1FrequencyValue>
     eec:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	c9 d1       	rcall	.+914    	; 0x1288 <ConvertRangeToPercentage>
     ef6:	20 e5       	ldi	r18, 0x50	; 80
     ef8:	33 ec       	ldi	r19, 0xC3	; 195
     efa:	4e e0       	ldi	r20, 0x0E	; 14
     efc:	62 e0       	ldi	r22, 0x02	; 2
	delayForMilliseconds(10);
     efe:	f7 db       	rcall	.-2066   	; 0x6ee <LcdPrintNumericalByteDelayAtPosition>
     f00:	8a e0       	ldi	r24, 0x0A	; 10
     f02:	90 e0       	ldi	r25, 0x00	; 0
	LcdPrintNumericalByteDelayAtPosition((ConvertRangeToPercentage(0,m_ushtTimer1FrequencyValue,m_ushtPwm1BDutyCycleValue)),3,14,50000);
     f04:	a0 d1       	rcall	.+832    	; 0x1246 <delayForMilliseconds>
     f06:	40 91 bc 01 	lds	r20, 0x01BC	; 0x8001bc <m_ushtPwm1BDutyCycleValue>
     f0a:	50 91 bd 01 	lds	r21, 0x01BD	; 0x8001bd <m_ushtPwm1BDutyCycleValue+0x1>
     f0e:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <m_ushtTimer1FrequencyValue>
     f12:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <m_ushtTimer1FrequencyValue+0x1>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	b6 d1       	rcall	.+876    	; 0x1288 <ConvertRangeToPercentage>
     f1c:	20 e5       	ldi	r18, 0x50	; 80
     f1e:	33 ec       	ldi	r19, 0xC3	; 195
     f20:	4e e0       	ldi	r20, 0x0E	; 14
     f22:	63 e0       	ldi	r22, 0x03	; 3
	LcdGoToPosition(1,10);
     f24:	e4 db       	rcall	.-2104   	; 0x6ee <LcdPrintNumericalByteDelayAtPosition>
     f26:	6a e0       	ldi	r22, 0x0A	; 10
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	63 da       	rcall	.-2874   	; 0x3f2 <LcdGoToPosition>
	
	
	
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	08 95       	ret

00000f3a <main>:
/**
* \brief Main program
*
*/
int main(void)
{
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	2b 97       	sbiw	r28, 0x0b	; 11
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
	uint8_t currentState = 0; //The current state the program is on
	uint8_t currentPwm1A_DC_Percentage = 0; //The duty cycle percentage for pwm 1A
	uint8_t currentPwm1B_DC_Percentage = 0; //The duty cycle percentage for pwm 1B
	uint16_t currentPwmFreqHz = 0; //The current frequency, in HZ, for PWM 1 
	uint8_t currentDigit = 0; //The current digit the input is on
	char currentFreqInput[5] = {0}; //The current input
     f4e:	fe 01       	movw	r30, r28
     f50:	31 96       	adiw	r30, 0x01	; 1
     f52:	85 e0       	ldi	r24, 0x05	; 5
     f54:	df 01       	movw	r26, r30
     f56:	1d 92       	st	X+, r1
     f58:	8a 95       	dec	r24
     f5a:	e9 f7       	brne	.-6      	; 0xf56 <main+0x1c>
	char current1AInput[3] = {0}; //The current input
     f5c:	1e 82       	std	Y+6, r1	; 0x06
     f5e:	1f 82       	std	Y+7, r1	; 0x07
     f60:	18 86       	std	Y+8, r1	; 0x08
	char current1BInput[3] = {0}; //The current input	
     f62:	19 86       	std	Y+9, r1	; 0x09
     f64:	1a 86       	std	Y+10, r1	; 0x0a
     f66:	1b 86       	std	Y+11, r1	; 0x0b
	
	//Initialize everything
	Initialization();
     f68:	82 de       	rcall	.-764    	; 0xc6e <_Z14Initializationv>
	
	LcdGoToPosition(1,10);
     f6a:	6a e0       	ldi	r22, 0x0A	; 10
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	41 da       	rcall	.-2942   	; 0x3f2 <LcdGoToPosition>
	
	LcdBlinkingCursorOn();
     f70:	8f e0       	ldi	r24, 0x0F	; 15
     f72:	e6 d9       	rcall	.-3124   	; 0x340 <LcdSendCommand>
     f74:	e1 2c       	mov	r14, r1
	unsigned char previousKeypress = 0; //The previous key pressed on the keypad
	uint8_t currentState = 0; //The current state the program is on
	uint8_t currentPwm1A_DC_Percentage = 0; //The duty cycle percentage for pwm 1A
	uint8_t currentPwm1B_DC_Percentage = 0; //The duty cycle percentage for pwm 1B
	uint16_t currentPwmFreqHz = 0; //The current frequency, in HZ, for PWM 1 
	uint8_t currentDigit = 0; //The current digit the input is on
     f76:	c1 2c       	mov	r12, r1
	unsigned char currentKeypress = 0; //The current key pressed on the keypad
	unsigned char previousKeypress = 0; //The previous key pressed on the keypad
	uint8_t currentState = 0; //The current state the program is on
	uint8_t currentPwm1A_DC_Percentage = 0; //The duty cycle percentage for pwm 1A
	uint8_t currentPwm1B_DC_Percentage = 0; //The duty cycle percentage for pwm 1B
	uint16_t currentPwmFreqHz = 0; //The current frequency, in HZ, for PWM 1 
     f78:	d1 2c       	mov	r13, r1
     f7a:	b1 2c       	mov	r11, r1
	//Variables
	unsigned char currentKeypress = 0; //The current key pressed on the keypad
	unsigned char previousKeypress = 0; //The previous key pressed on the keypad
	uint8_t currentState = 0; //The current state the program is on
	uint8_t currentPwm1A_DC_Percentage = 0; //The duty cycle percentage for pwm 1A
	uint8_t currentPwm1B_DC_Percentage = 0; //The duty cycle percentage for pwm 1B
     f7c:	a1 2c       	mov	r10, r1
{
	//Variables
	unsigned char currentKeypress = 0; //The current key pressed on the keypad
	unsigned char previousKeypress = 0; //The previous key pressed on the keypad
	uint8_t currentState = 0; //The current state the program is on
	uint8_t currentPwm1A_DC_Percentage = 0; //The duty cycle percentage for pwm 1A
     f7e:	f1 2c       	mov	r15, r1
int main(void)
{
	//Variables
	unsigned char currentKeypress = 0; //The current key pressed on the keypad
	unsigned char previousKeypress = 0; //The previous key pressed on the keypad
	uint8_t currentState = 0; //The current state the program is on
     f80:	00 e0       	ldi	r16, 0x00	; 0
*/
int main(void)
{
	//Variables
	unsigned char currentKeypress = 0; //The current key pressed on the keypad
	unsigned char previousKeypress = 0; //The previous key pressed on the keypad
     f82:	49 e9       	ldi	r20, 0x99	; 153
	
    /* Replace with your application code */
    while (1) 
    {
		//Read any key presses
		currentKeypress = kp_Scan_const(m_uchrKeypdMatrixColumnPins, m_uchrKeypdMatrixRowPins,m_uchrKeypadMatrixValues);
     f84:	51 e0       	ldi	r21, 0x01	; 1
     f86:	65 ea       	ldi	r22, 0xA5	; 165
     f88:	71 e0       	ldi	r23, 0x01	; 1
     f8a:	89 ea       	ldi	r24, 0xA9	; 169
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	d4 d8       	rcall	.-3672   	; 0x138 <kp_Scan_const>
     f90:	18 2f       	mov	r17, r24
     f92:	88 23       	and	r24, r24
		
		//If there's a new key press that isn't 0...
		if(currentKeypress != 0 && currentKeypress != previousKeypress)
     f94:	09 f4       	brne	.+2      	; 0xf98 <main+0x5e>
     f96:	46 c1       	rjmp	.+652    	; 0x1224 <__EEPROM_REGION_LENGTH__+0x224>
     f98:	08 17       	cp	r16, r24
     f9a:	09 f4       	brne	.+2      	; 0xf9e <main+0x64>
     f9c:	43 c1       	rjmp	.+646    	; 0x1224 <__EEPROM_REGION_LENGTH__+0x224>
     f9e:	83 32       	cpi	r24, 0x23	; 35
		{
			switch(currentKeypress)
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <main+0x6a>
     fa2:	70 c0       	rjmp	.+224    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
     fa4:	8a 32       	cpi	r24, 0x2A	; 42
     fa6:	09 f0       	breq	.+2      	; 0xfaa <main+0x70>
     fa8:	ec c0       	rjmp	.+472    	; 0x1182 <__EEPROM_REGION_LENGTH__+0x182>
     faa:	f1 10       	cpse	r15, r1
			{
				case '*':
					
					if(currentState == 0)
     fac:	2e c0       	rjmp	.+92     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     fae:	49 81       	ldd	r20, Y+1	; 0x01
					{
						currentPwmFreqHz =  (currentFreqInput[0] * 10000);
     fb0:	20 e1       	ldi	r18, 0x10	; 16
     fb2:	37 e2       	ldi	r19, 0x27	; 39
     fb4:	42 9f       	mul	r20, r18
     fb6:	c0 01       	movw	r24, r0
     fb8:	43 9f       	mul	r20, r19
     fba:	90 0d       	add	r25, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	4a 81       	ldd	r20, Y+2	; 0x02
						currentPwmFreqHz += (currentFreqInput[1] * 1000);
     fc0:	28 ee       	ldi	r18, 0xE8	; 232
     fc2:	33 e0       	ldi	r19, 0x03	; 3
     fc4:	42 9f       	mul	r20, r18
     fc6:	60 01       	movw	r12, r0
     fc8:	43 9f       	mul	r20, r19
     fca:	d0 0c       	add	r13, r0
     fcc:	11 24       	eor	r1, r1
     fce:	8c 0d       	add	r24, r12
     fd0:	9d 1d       	adc	r25, r13
     fd2:	2b 81       	ldd	r18, Y+3	; 0x03
						currentPwmFreqHz += (currentFreqInput[2] * 100);
     fd4:	6c 01       	movw	r12, r24
     fd6:	b4 e6       	ldi	r27, 0x64	; 100
     fd8:	2b 9f       	mul	r18, r27
     fda:	c0 0c       	add	r12, r0
     fdc:	d1 1c       	adc	r13, r1
     fde:	11 24       	eor	r1, r1
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
						currentPwmFreqHz += (currentFreqInput[3] * 10);
     fe2:	89 2f       	mov	r24, r25
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9c 01       	movw	r18, r24
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	8c 0d       	add	r24, r12
     ffe:	9d 1d       	adc	r25, r13
    1000:	2d 81       	ldd	r18, Y+5	; 0x05
						currentPwmFreqHz += (currentFreqInput[4]);
    1002:	6c 01       	movw	r12, r24
    1004:	c2 0e       	add	r12, r18
    1006:	d1 1c       	adc	r13, r1
    1008:	1e c0       	rjmp	.+60     	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    100a:	31 e0       	ldi	r19, 0x01	; 1
					}
					else if(currentState == 1)
    100c:	f3 12       	cpse	r15, r19
    100e:	0e c0       	rjmp	.+28     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
					{
						
						currentPwm1A_DC_Percentage = (current1AInput[0] * 100);
    1012:	af 80       	ldd	r10, Y+7	; 0x07
						currentPwm1A_DC_Percentage += (current1AInput[1] * 10);
    1014:	aa 0c       	add	r10, r10
    1016:	8a 2d       	mov	r24, r10
    1018:	88 0f       	add	r24, r24
    101a:	88 0f       	add	r24, r24
    101c:	a8 0e       	add	r10, r24
    101e:	84 e6       	ldi	r24, 0x64	; 100
    1020:	98 9f       	mul	r25, r24
    1022:	a0 0c       	add	r10, r0
    1024:	11 24       	eor	r1, r1
    1026:	88 85       	ldd	r24, Y+8	; 0x08
						currentPwm1A_DC_Percentage += (current1AInput[2]);
    1028:	a8 0e       	add	r10, r24
    102a:	0d c0       	rjmp	.+26     	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    102c:	99 85       	ldd	r25, Y+9	; 0x09
					}
					else
					{
						currentPwm1B_DC_Percentage = (current1BInput[0] * 100);
    102e:	ba 84       	ldd	r11, Y+10	; 0x0a
						currentPwm1B_DC_Percentage += (current1BInput[1] * 10);
    1030:	bb 0c       	add	r11, r11
    1032:	8b 2d       	mov	r24, r11
    1034:	88 0f       	add	r24, r24
    1036:	88 0f       	add	r24, r24
    1038:	b8 0e       	add	r11, r24
    103a:	a4 e6       	ldi	r26, 0x64	; 100
    103c:	9a 9f       	mul	r25, r26
    103e:	b0 0c       	add	r11, r0
    1040:	11 24       	eor	r1, r1
    1042:	8b 85       	ldd	r24, Y+11	; 0x0b
						currentPwm1B_DC_Percentage += (current1BInput[2]);
    1044:	b8 0e       	add	r11, r24
    1046:	f3 94       	inc	r15
					}
				
					//Add to the current state
					currentState += 1;
    1048:	b2 e0       	ldi	r27, 0x02	; 2
					
					//If the current state is greater than or equal to 3 (The amount of items to set)...
					if( currentState >= 3)
    104a:	bf 15       	cp	r27, r15
    104c:	08 f4       	brcc	.+2      	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
					
					//Reset the currently active digit
					currentDigit = 0;
	
					//Set the percentages and frequencies before changing states
					Pwm1SetFreq(currentPwmFreqHz);
    104e:	f1 2c       	mov	r15, r1
    1050:	c6 01       	movw	r24, r12
					Pwm1A_SetDutyCycle(currentPwm1A_DC_Percentage);
    1052:	56 de       	rcall	.-852    	; 0xd00 <_Z11Pwm1SetFreqj>
    1054:	8a 2d       	mov	r24, r10
    1056:	2c de       	rcall	.-936    	; 0xcb0 <_Z18Pwm1A_SetDutyCycleh>
					Pwm1B_SetDutyCycle(currentPwm1B_DC_Percentage);
    1058:	8b 2d       	mov	r24, r11
    105a:	3e de       	rcall	.-900    	; 0xcd8 <_Z18Pwm1B_SetDutyCycleh>
					
					
					
					if(currentState == 0)
    105c:	f1 10       	cpse	r15, r1
    105e:	05 c0       	rjmp	.+10     	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
					{
						LcdGoToPosition(1,10);
    1060:	6a e0       	ldi	r22, 0x0A	; 10
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	c6 d9       	rcall	.-3188   	; 0x3f2 <LcdGoToPosition>
					{
						currentState = 0;
					};
					
					//Reset the currently active digit
					currentDigit = 0;
    1066:	e1 2c       	mov	r14, r1
    1068:	dd c0       	rjmp	.+442    	; 0x1224 <__EEPROM_REGION_LENGTH__+0x224>
					
					if(currentState == 0)
					{
						LcdGoToPosition(1,10);
					}
					else if(currentState == 1)
    106a:	31 e0       	ldi	r19, 0x01	; 1
    106c:	f3 12       	cpse	r15, r19
					{
						
						LcdGoToPosition(2,14);
    106e:	05 c0       	rjmp	.+10     	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1070:	6e e0       	ldi	r22, 0x0E	; 14
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	be d9       	rcall	.-3204   	; 0x3f2 <LcdGoToPosition>
					{
						currentState = 0;
					};
					
					//Reset the currently active digit
					currentDigit = 0;
    1076:	e1 2c       	mov	r14, r1
    1078:	d5 c0       	rjmp	.+426    	; 0x1224 <__EEPROM_REGION_LENGTH__+0x224>
						
						LcdGoToPosition(2,14);
					}
					else
					{
						LcdGoToPosition(3,14);
    107a:	6e e0       	ldi	r22, 0x0E	; 14
    107c:	83 e0       	ldi	r24, 0x03	; 3
    107e:	b9 d9       	rcall	.-3214   	; 0x3f2 <LcdGoToPosition>
    1080:	e1 2c       	mov	r14, r1
					{
						currentState = 0;
					};
					
					//Reset the currently active digit
					currentDigit = 0;
    1082:	d0 c0       	rjmp	.+416    	; 0x1224 <__EEPROM_REGION_LENGTH__+0x224>
    1084:	81 e0       	ldi	r24, 0x01	; 1
				
				case '#':
					currentDigit = 0;
					
					//Set the values for
					switch(currentState)
    1086:	f8 16       	cp	r15, r24
    1088:	09 f4       	brne	.+2      	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    108a:	41 c0       	rjmp	.+130    	; 0x110e <__EEPROM_REGION_LENGTH__+0x10e>
    108c:	f8 16       	cp	r15, r24
    108e:	28 f0       	brcs	.+10     	; 0x109a <__EEPROM_REGION_LENGTH__+0x9a>
    1090:	a2 e0       	ldi	r26, 0x02	; 2
    1092:	fa 16       	cp	r15, r26
    1094:	09 f4       	brne	.+2      	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    1096:	58 c0       	rjmp	.+176    	; 0x1148 <__EEPROM_REGION_LENGTH__+0x148>
    1098:	c3 c0       	rjmp	.+390    	; 0x1220 <__EEPROM_REGION_LENGTH__+0x220>
    109a:	49 81       	ldd	r20, Y+1	; 0x01
					{
						case 0:
						
							currentPwmFreqHz =  (currentFreqInput[0] * 10000);
    109c:	20 e1       	ldi	r18, 0x10	; 16
    109e:	37 e2       	ldi	r19, 0x27	; 39
    10a0:	42 9f       	mul	r20, r18
    10a2:	c0 01       	movw	r24, r0
    10a4:	43 9f       	mul	r20, r19
    10a6:	90 0d       	add	r25, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	4a 81       	ldd	r20, Y+2	; 0x02
							currentPwmFreqHz += (currentFreqInput[1] * 1000);
    10ac:	28 ee       	ldi	r18, 0xE8	; 232
    10ae:	33 e0       	ldi	r19, 0x03	; 3
    10b0:	42 9f       	mul	r20, r18
    10b2:	60 01       	movw	r12, r0
    10b4:	43 9f       	mul	r20, r19
    10b6:	d0 0c       	add	r13, r0
    10b8:	11 24       	eor	r1, r1
    10ba:	8c 0d       	add	r24, r12
    10bc:	9d 1d       	adc	r25, r13
    10be:	2b 81       	ldd	r18, Y+3	; 0x03
							currentPwmFreqHz += (currentFreqInput[2] * 100);
    10c0:	6c 01       	movw	r12, r24
    10c2:	b4 e6       	ldi	r27, 0x64	; 100
    10c4:	2b 9f       	mul	r18, r27
    10c6:	c0 0c       	add	r12, r0
    10c8:	d1 1c       	adc	r13, r1
    10ca:	11 24       	eor	r1, r1
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
							currentPwmFreqHz += (currentFreqInput[3] * 10);
    10ce:	89 2f       	mov	r24, r25
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c 01       	movw	r18, r24
    10d4:	22 0f       	add	r18, r18
    10d6:	33 1f       	adc	r19, r19
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	82 0f       	add	r24, r18
    10e6:	93 1f       	adc	r25, r19
    10e8:	8c 0d       	add	r24, r12
    10ea:	9d 1d       	adc	r25, r13
							currentPwmFreqHz += (currentFreqInput[4]);
    10ec:	2d 81       	ldd	r18, Y+5	; 0x05
    10ee:	6c 01       	movw	r12, r24
    10f0:	c2 0e       	add	r12, r18
							
							if(currentPwmFreqHz > PWM_1_MAX_HZ)
							{
								currentPwmFreqHz = PWM_1_MAX_HZ;
							}
							LcdPrintNumericalShortDelayAtPosition(currentPwmFreqHz,1,10,50000);
    10f2:	d1 1c       	adc	r13, r1
    10f4:	20 e5       	ldi	r18, 0x50	; 80
    10f6:	33 ec       	ldi	r19, 0xC3	; 195
    10f8:	4a e0       	ldi	r20, 0x0A	; 10
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	c6 01       	movw	r24, r12
							delayForMilliseconds(10);
    10fe:	4f db       	rcall	.-2402   	; 0x79e <LcdPrintNumericalShortDelayAtPosition>
    1100:	8a e0       	ldi	r24, 0x0A	; 10
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a0 d0       	rcall	.+320    	; 0x1246 <delayForMilliseconds>
							Pwm1SetFreq(currentPwmFreqHz);
    1106:	c6 01       	movw	r24, r12
    1108:	fb dd       	rcall	.-1034   	; 0xd00 <_Z11Pwm1SetFreqj>
    110a:	e1 2c       	mov	r14, r1
					
					
				break;
				
				case '#':
					currentDigit = 0;
    110c:	8b c0       	rjmp	.+278    	; 0x1224 <__EEPROM_REGION_LENGTH__+0x224>
							LcdPrintNumericalShortDelayAtPosition(currentPwmFreqHz,1,10,50000);
							delayForMilliseconds(10);
							Pwm1SetFreq(currentPwmFreqHz);
							
							
						break;
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
						
						case 1:
						
							currentPwm1A_DC_Percentage = (current1AInput[0] * 100);
    1110:	af 80       	ldd	r10, Y+7	; 0x07
							currentPwm1A_DC_Percentage += (current1AInput[1] * 10);
    1112:	aa 0c       	add	r10, r10
    1114:	8a 2d       	mov	r24, r10
    1116:	88 0f       	add	r24, r24
    1118:	88 0f       	add	r24, r24
    111a:	a8 0e       	add	r10, r24
    111c:	34 e6       	ldi	r19, 0x64	; 100
    111e:	93 9f       	mul	r25, r19
    1120:	a0 0c       	add	r10, r0
							currentPwm1A_DC_Percentage += (current1AInput[2]);
    1122:	11 24       	eor	r1, r1
    1124:	88 85       	ldd	r24, Y+8	; 0x08
							
							
							Pwm1A_SetDutyCycle(currentPwm1A_DC_Percentage);
    1126:	a8 0e       	add	r10, r24
    1128:	8a 2d       	mov	r24, r10
							LcdPrintNumericalByteDelayAtPosition(currentPwm1A_DC_Percentage,2,14,50000);
    112a:	c2 dd       	rcall	.-1148   	; 0xcb0 <_Z18Pwm1A_SetDutyCycleh>
    112c:	20 e5       	ldi	r18, 0x50	; 80
    112e:	33 ec       	ldi	r19, 0xC3	; 195
    1130:	4e e0       	ldi	r20, 0x0E	; 14
    1132:	62 e0       	ldi	r22, 0x02	; 2
    1134:	8a 2d       	mov	r24, r10
    1136:	db da       	rcall	.-2634   	; 0x6ee <LcdPrintNumericalByteDelayAtPosition>
							LcdGoToPosition(2,14);
    1138:	6e e0       	ldi	r22, 0x0E	; 14
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	5a d9       	rcall	.-3404   	; 0x3f2 <LcdGoToPosition>
    113e:	8a e0       	ldi	r24, 0x0A	; 10
							delayForMilliseconds(10);
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	81 d0       	rcall	.+258    	; 0x1246 <delayForMilliseconds>
    1144:	e1 2c       	mov	r14, r1
					
					
				break;
				
				case '#':
					currentDigit = 0;
    1146:	6e c0       	rjmp	.+220    	; 0x1224 <__EEPROM_REGION_LENGTH__+0x224>
							LcdGoToPosition(2,14);
							delayForMilliseconds(10);
							
							
	
						break;
    1148:	99 85       	ldd	r25, Y+9	; 0x09
						
						case 2:
							currentPwm1B_DC_Percentage = (current1BInput[0] * 100);
    114a:	ba 84       	ldd	r11, Y+10	; 0x0a
							currentPwm1B_DC_Percentage += (current1BInput[1] * 10);
    114c:	bb 0c       	add	r11, r11
    114e:	8b 2d       	mov	r24, r11
    1150:	88 0f       	add	r24, r24
    1152:	88 0f       	add	r24, r24
    1154:	b8 0e       	add	r11, r24
    1156:	84 e6       	ldi	r24, 0x64	; 100
    1158:	98 9f       	mul	r25, r24
    115a:	b0 0c       	add	r11, r0
							currentPwm1B_DC_Percentage += (current1BInput[2]);
    115c:	11 24       	eor	r1, r1
    115e:	8b 85       	ldd	r24, Y+11	; 0x0b
							
							Pwm1B_SetDutyCycle(currentPwm1B_DC_Percentage);
    1160:	b8 0e       	add	r11, r24
    1162:	8b 2d       	mov	r24, r11
    1164:	b9 dd       	rcall	.-1166   	; 0xcd8 <_Z18Pwm1B_SetDutyCycleh>
							
							LcdPrintNumericalByteDelayAtPosition(currentPwm1B_DC_Percentage,3,14,50000);
    1166:	20 e5       	ldi	r18, 0x50	; 80
    1168:	33 ec       	ldi	r19, 0xC3	; 195
    116a:	4e e0       	ldi	r20, 0x0E	; 14
    116c:	63 e0       	ldi	r22, 0x03	; 3
    116e:	8b 2d       	mov	r24, r11
    1170:	be da       	rcall	.-2692   	; 0x6ee <LcdPrintNumericalByteDelayAtPosition>
    1172:	6e e0       	ldi	r22, 0x0E	; 14
							LcdGoToPosition(3,14);
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	3d d9       	rcall	.-3462   	; 0x3f2 <LcdGoToPosition>
    1178:	8a e0       	ldi	r24, 0x0A	; 10
    117a:	90 e0       	ldi	r25, 0x00	; 0
							delayForMilliseconds(10);
    117c:	64 d0       	rcall	.+200    	; 0x1246 <delayForMilliseconds>
    117e:	e1 2c       	mov	r14, r1
    1180:	51 c0       	rjmp	.+162    	; 0x1224 <__EEPROM_REGION_LENGTH__+0x224>
    1182:	a1 e0       	ldi	r26, 0x01	; 1
					
					
				break;
				
				case '#':
					currentDigit = 0;
    1184:	fa 16       	cp	r15, r26
							LcdPrintNumericalByteDelayAtPosition(currentPwm1B_DC_Percentage,3,14,50000);
							LcdGoToPosition(3,14);
							delayForMilliseconds(10);
		
							
						break;
    1186:	e9 f0       	breq	.+58     	; 0x11c2 <__EEPROM_REGION_LENGTH__+0x1c2>
						break;
					};
				break;
				
				default:
					switch(currentState)
    1188:	fa 16       	cp	r15, r26
    118a:	20 f0       	brcs	.+8      	; 0x1194 <__EEPROM_REGION_LENGTH__+0x194>
    118c:	b2 e0       	ldi	r27, 0x02	; 2
    118e:	fb 16       	cp	r15, r27
    1190:	79 f1       	breq	.+94     	; 0x11f0 <__EEPROM_REGION_LENGTH__+0x1f0>
    1192:	44 c0       	rjmp	.+136    	; 0x121c <__EEPROM_REGION_LENGTH__+0x21c>
    1194:	34 e0       	ldi	r19, 0x04	; 4
    1196:	3e 15       	cp	r19, r14
					{
						case 0:
							if(currentDigit >= 5)
    1198:	18 f4       	brcc	.+6      	; 0x11a0 <__EEPROM_REGION_LENGTH__+0x1a0>
    119a:	68 94       	set
    119c:	ee 24       	eor	r14, r14
							{
								currentDigit = 4;
    119e:	e2 f8       	bld	r14, 2
    11a0:	20 e1       	ldi	r18, 0x10	; 16
    11a2:	37 e2       	ldi	r19, 0x27	; 39
							}
							
							
							//Display the pressed key
							LcdPrintCharDelayAtPosition(currentKeypress,1,(10 + (currentDigit)),10000);
    11a4:	4a e0       	ldi	r20, 0x0A	; 10
    11a6:	4e 0d       	add	r20, r14
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	81 2f       	mov	r24, r17
    11ac:	8d d9       	rcall	.-3302   	; 0x4c8 <LcdPrintCharDelayAtPosition>
    11ae:	e1 e0       	ldi	r30, 0x01	; 1
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	ec 0f       	add	r30, r28
							
							currentFreqInput[currentDigit] = (currentKeypress - 0x30);
    11b4:	fd 1f       	adc	r31, r29
    11b6:	ee 0d       	add	r30, r14
    11b8:	f1 1d       	adc	r31, r1
    11ba:	80 ed       	ldi	r24, 0xD0	; 208
    11bc:	81 0f       	add	r24, r17
    11be:	80 83       	st	Z, r24
    11c0:	2d c0       	rjmp	.+90     	; 0x121c <__EEPROM_REGION_LENGTH__+0x21c>
    11c2:	82 e0       	ldi	r24, 0x02	; 2
							
						break;
    11c4:	8e 15       	cp	r24, r14
						
						case 1:
							if(currentDigit >= 3)
    11c6:	18 f4       	brcc	.+6      	; 0x11ce <__EEPROM_REGION_LENGTH__+0x1ce>
    11c8:	68 94       	set
    11ca:	ee 24       	eor	r14, r14
							{
								currentDigit = 2;
    11cc:	e1 f8       	bld	r14, 1
    11ce:	20 e1       	ldi	r18, 0x10	; 16
    11d0:	37 e2       	ldi	r19, 0x27	; 39
							}
							
							LcdPrintCharDelayAtPosition(currentKeypress,2,(14 + (currentDigit)),10000);
    11d2:	4e e0       	ldi	r20, 0x0E	; 14
    11d4:	4e 0d       	add	r20, r14
    11d6:	62 e0       	ldi	r22, 0x02	; 2
    11d8:	81 2f       	mov	r24, r17
    11da:	76 d9       	rcall	.-3348   	; 0x4c8 <LcdPrintCharDelayAtPosition>
    11dc:	e6 e0       	ldi	r30, 0x06	; 6
    11de:	f0 e0       	ldi	r31, 0x00	; 0
							current1AInput[currentDigit] = (currentKeypress - 0x30);
    11e0:	ec 0f       	add	r30, r28
    11e2:	fd 1f       	adc	r31, r29
    11e4:	ee 0d       	add	r30, r14
    11e6:	f1 1d       	adc	r31, r1
    11e8:	80 ed       	ldi	r24, 0xD0	; 208
    11ea:	81 0f       	add	r24, r17
    11ec:	80 83       	st	Z, r24
    11ee:	16 c0       	rjmp	.+44     	; 0x121c <__EEPROM_REGION_LENGTH__+0x21c>
    11f0:	a2 e0       	ldi	r26, 0x02	; 2
							
							
						break;
    11f2:	ae 15       	cp	r26, r14
						
						case 2:
							if(currentDigit >= 3)
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__EEPROM_REGION_LENGTH__+0x1fc>
    11f6:	68 94       	set
    11f8:	ee 24       	eor	r14, r14
							{
								currentDigit = 2;
    11fa:	e1 f8       	bld	r14, 1
    11fc:	20 e1       	ldi	r18, 0x10	; 16
							}
							LcdPrintCharDelayAtPosition(currentKeypress,3,(14 + (currentDigit)),10000);
    11fe:	37 e2       	ldi	r19, 0x27	; 39
    1200:	4e e0       	ldi	r20, 0x0E	; 14
    1202:	4e 0d       	add	r20, r14
    1204:	63 e0       	ldi	r22, 0x03	; 3
    1206:	81 2f       	mov	r24, r17
    1208:	5f d9       	rcall	.-3394   	; 0x4c8 <LcdPrintCharDelayAtPosition>
    120a:	e9 e0       	ldi	r30, 0x09	; 9
    120c:	f0 e0       	ldi	r31, 0x00	; 0
							current1BInput[currentDigit] = (currentKeypress - 0x30);
    120e:	ec 0f       	add	r30, r28
    1210:	fd 1f       	adc	r31, r29
    1212:	ee 0d       	add	r30, r14
    1214:	f1 1d       	adc	r31, r1
    1216:	80 ed       	ldi	r24, 0xD0	; 208
    1218:	81 0f       	add	r24, r17
    121a:	80 83       	st	Z, r24
    121c:	e3 94       	inc	r14
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <__EEPROM_REGION_LENGTH__+0x224>
						break;
						
						default:
						break;
					};
					currentDigit++;
    1220:	e1 2c       	mov	r14, r1
				break;
    1222:	f1 2c       	mov	r15, r1
					
					
				break;
				
				case '#':
					currentDigit = 0;
    1224:	84 e6       	ldi	r24, 0x64	; 100
		
							
						break;
						
						default:
							currentState = 0;
    1226:	90 e0       	ldi	r25, 0x00	; 0
			
			
		}
		
		//Debounce
		delayForMilliseconds(100);
    1228:	0e d0       	rcall	.+28     	; 0x1246 <delayForMilliseconds>
    122a:	01 2f       	mov	r16, r17
    122c:	aa ce       	rjmp	.-684    	; 0xf82 <main+0x48>

0000122e <delayForMicroseconds>:
/**
 * \brief Delays for x microseconds
 * @param microseconds delay time
 */
void delayForMicroseconds(uint16_t microseconds) {
	for(uint16_t i = 0; i < microseconds; i++) {
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	05 c0       	rjmp	.+10     	; 0x123e <delayForMicroseconds+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1234:	44 e0       	ldi	r20, 0x04	; 4
    1236:	4a 95       	dec	r20
    1238:	f1 f7       	brne	.-4      	; 0x1236 <delayForMicroseconds+0x8>
    123a:	2f 5f       	subi	r18, 0xFF	; 255
    123c:	3f 4f       	sbci	r19, 0xFF	; 255
    123e:	28 17       	cp	r18, r24
    1240:	39 07       	cpc	r19, r25
    1242:	c0 f3       	brcs	.-16     	; 0x1234 <delayForMicroseconds+0x6>
		__DELAYS_US_DELAY_CALL(1);
	}
}
    1244:	08 95       	ret

00001246 <delayForMilliseconds>:
/**
 * Delays for x milliseconds
 * @param milliseconds delay time
 */
void delayForMilliseconds(uint16_t milliseconds) {
	for(uint16_t i = 0; i < milliseconds; i++) {
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	08 c0       	rjmp	.+16     	; 0x125c <delayForMilliseconds+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    124c:	e7 eb       	ldi	r30, 0xB7	; 183
    124e:	fb e0       	ldi	r31, 0x0B	; 11
    1250:	31 97       	sbiw	r30, 0x01	; 1
    1252:	f1 f7       	brne	.-4      	; 0x1250 <delayForMilliseconds+0xa>
    1254:	00 c0       	rjmp	.+0      	; 0x1256 <delayForMilliseconds+0x10>
    1256:	00 00       	nop
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	28 17       	cp	r18, r24
    125e:	39 07       	cpc	r19, r25
    1260:	a8 f3       	brcs	.-22     	; 0x124c <delayForMilliseconds+0x6>
		__DELAYS_MS_DELAY_CALL(1);
	}
}
    1262:	08 95       	ret

00001264 <delayForTenthSeconds>:
/**
 * Delays for x tenth seconds
 * @param tenthSeconds the amount of tenth seconds/100 milliseconds to delay for
 */
void delayForTenthSeconds(uint16_t tenthSeconds) {
	for(uint16_t i = 0; i < tenthSeconds; i++) {
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	0b c0       	rjmp	.+22     	; 0x1280 <delayForTenthSeconds+0x1c>
    126a:	4f e7       	ldi	r20, 0x7F	; 127
    126c:	59 ea       	ldi	r21, 0xA9	; 169
    126e:	63 e0       	ldi	r22, 0x03	; 3
    1270:	41 50       	subi	r20, 0x01	; 1
    1272:	50 40       	sbci	r21, 0x00	; 0
    1274:	60 40       	sbci	r22, 0x00	; 0
    1276:	e1 f7       	brne	.-8      	; 0x1270 <delayForTenthSeconds+0xc>
    1278:	00 c0       	rjmp	.+0      	; 0x127a <delayForTenthSeconds+0x16>
    127a:	00 00       	nop
    127c:	2f 5f       	subi	r18, 0xFF	; 255
    127e:	3f 4f       	sbci	r19, 0xFF	; 255
    1280:	28 17       	cp	r18, r24
    1282:	39 07       	cpc	r19, r25
    1284:	90 f3       	brcs	.-28     	; 0x126a <delayForTenthSeconds+0x6>
		__DELAYS_MS_DELAY_CALL(100);
	}
}
    1286:	08 95       	ret

00001288 <ConvertRangeToPercentage>:
    {
        calculatedValue = minValue;
    }
	
	return calculatedValue;
}
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	8c 01       	movw	r16, r24
    129a:	eb 01       	movw	r28, r22
    129c:	68 17       	cp	r22, r24
    129e:	79 07       	cpc	r23, r25
    12a0:	30 f4       	brcc	.+12     	; 0x12ae <ConvertRangeToPercentage+0x26>
    12a2:	c8 27       	eor	r28, r24
    12a4:	d9 27       	eor	r29, r25
    12a6:	0c 27       	eor	r16, r28
    12a8:	1d 27       	eor	r17, r29
    12aa:	c0 27       	eor	r28, r16
    12ac:	d1 27       	eor	r29, r17
    12ae:	4c 17       	cp	r20, r28
    12b0:	5d 07       	cpc	r21, r29
    12b2:	08 f5       	brcc	.+66     	; 0x12f6 <ConvertRangeToPercentage+0x6e>
    12b4:	0c 17       	cp	r16, r28
    12b6:	1d 07       	cpc	r17, r29
    12b8:	01 f1       	breq	.+64     	; 0x12fa <ConvertRangeToPercentage+0x72>
    12ba:	04 17       	cp	r16, r20
    12bc:	15 07       	cpc	r17, r21
    12be:	f8 f4       	brcc	.+62     	; 0x12fe <ConvertRangeToPercentage+0x76>
    12c0:	ba 01       	movw	r22, r20
    12c2:	60 1b       	sub	r22, r16
    12c4:	71 0b       	sbc	r23, r17
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	e2 d0       	rcall	.+452    	; 0x1490 <__floatunsisf>
    12cc:	6b 01       	movw	r12, r22
    12ce:	7c 01       	movw	r14, r24
    12d0:	be 01       	movw	r22, r28
    12d2:	60 1b       	sub	r22, r16
    12d4:	71 0b       	sbc	r23, r17
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	da d0       	rcall	.+436    	; 0x1490 <__floatunsisf>
    12dc:	9b 01       	movw	r18, r22
    12de:	ac 01       	movw	r20, r24
    12e0:	c7 01       	movw	r24, r14
    12e2:	b6 01       	movw	r22, r12
    12e4:	41 d0       	rcall	.+130    	; 0x1368 <__divsf3>
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	48 ec       	ldi	r20, 0xC8	; 200
    12ec:	52 e4       	ldi	r21, 0x42	; 66
    12ee:	5e d1       	rcall	.+700    	; 0x15ac <__mulsf3>
    12f0:	a3 d0       	rcall	.+326    	; 0x1438 <__fixunssfsi>
    12f2:	86 2f       	mov	r24, r22
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <ConvertRangeToPercentage+0x78>
    12f6:	84 e6       	ldi	r24, 0x64	; 100
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <ConvertRangeToPercentage+0x78>
    12fa:	84 e6       	ldi	r24, 0x64	; 100
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <ConvertRangeToPercentage+0x78>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ff 90       	pop	r15
    130a:	ef 90       	pop	r14
    130c:	df 90       	pop	r13
    130e:	cf 90       	pop	r12
    1310:	08 95       	ret

00001312 <ConvertPercentage>:
* \param maxValue The maximum possible value
* \param percentageValue The percentage value in the range
* \return uint16_t calculated value
*/
uint16_t ConvertPercentage(uint16_t maxValue, uint16_t percentageValue)
{
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	ec 01       	movw	r28, r24
	//The calculated value for the value from the percentage value passed
	uint16_t calculatedValue = 0; 
	
	//If the percentage passed is greater than or equal to 100%...
	if(percentageValue >= 100)
    1320:	64 36       	cpi	r22, 0x64	; 100
    1322:	71 05       	cpc	r23, r1
    1324:	c8 f4       	brcc	.+50     	; 0x1358 <ConvertPercentage+0x46>
	{
		//Set to the max value
		calculatedValue = maxValue;
	}
	//else if the value is greater than 0...
	else if(percentageValue > 0)
    1326:	61 15       	cp	r22, r1
    1328:	71 05       	cpc	r23, r1
    132a:	a1 f0       	breq	.+40     	; 0x1354 <ConvertPercentage+0x42>
	{
		//Get the beginning point of the value by taking the percentage and dividing by 100
		float mathedUpPercentage =  (float)((float)percentageValue/100.0f);
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	af d0       	rcall	.+350    	; 0x1490 <__floatunsisf>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	48 ec       	ldi	r20, 0xC8	; 200
    1338:	52 e4       	ldi	r21, 0x42	; 66
    133a:	16 d0       	rcall	.+44     	; 0x1368 <__divsf3>
    133c:	6b 01       	movw	r12, r22
    133e:	7c 01       	movw	r14, r24
		
		//Multiply this value by the max value to get the calculated value.
		calculatedValue = (uint16_t)(mathedUpPercentage * maxValue);
    1340:	be 01       	movw	r22, r28
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a4 d0       	rcall	.+328    	; 0x1490 <__floatunsisf>
    1348:	a7 01       	movw	r20, r14
    134a:	96 01       	movw	r18, r12
    134c:	2f d1       	rcall	.+606    	; 0x15ac <__mulsf3>
    134e:	74 d0       	rcall	.+232    	; 0x1438 <__fixunssfsi>
    1350:	eb 01       	movw	r28, r22
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <ConvertPercentage+0x46>
* \return uint16_t calculated value
*/
uint16_t ConvertPercentage(uint16_t maxValue, uint16_t percentageValue)
{
	//The calculated value for the value from the percentage value passed
	uint16_t calculatedValue = 0; 
    1354:	c0 e0       	ldi	r28, 0x00	; 0
    1356:	d0 e0       	ldi	r29, 0x00	; 0
	
	}
	
	return calculatedValue;

}
    1358:	ce 01       	movw	r24, r28
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	df 90       	pop	r13
    1364:	cf 90       	pop	r12
    1366:	08 95       	ret

00001368 <__divsf3>:
    1368:	0c d0       	rcall	.+24     	; 0x1382 <__divsf3x>
    136a:	e6 c0       	rjmp	.+460    	; 0x1538 <__fp_round>
    136c:	de d0       	rcall	.+444    	; 0x152a <__fp_pscB>
    136e:	40 f0       	brcs	.+16     	; 0x1380 <__divsf3+0x18>
    1370:	d5 d0       	rcall	.+426    	; 0x151c <__fp_pscA>
    1372:	30 f0       	brcs	.+12     	; 0x1380 <__divsf3+0x18>
    1374:	21 f4       	brne	.+8      	; 0x137e <__divsf3+0x16>
    1376:	5f 3f       	cpi	r21, 0xFF	; 255
    1378:	19 f0       	breq	.+6      	; 0x1380 <__divsf3+0x18>
    137a:	c7 c0       	rjmp	.+398    	; 0x150a <__fp_inf>
    137c:	51 11       	cpse	r21, r1
    137e:	10 c1       	rjmp	.+544    	; 0x15a0 <__fp_szero>
    1380:	ca c0       	rjmp	.+404    	; 0x1516 <__fp_nan>

00001382 <__divsf3x>:
    1382:	eb d0       	rcall	.+470    	; 0x155a <__fp_split3>
    1384:	98 f3       	brcs	.-26     	; 0x136c <__divsf3+0x4>

00001386 <__divsf3_pse>:
    1386:	99 23       	and	r25, r25
    1388:	c9 f3       	breq	.-14     	; 0x137c <__divsf3+0x14>
    138a:	55 23       	and	r21, r21
    138c:	b1 f3       	breq	.-20     	; 0x137a <__divsf3+0x12>
    138e:	95 1b       	sub	r25, r21
    1390:	55 0b       	sbc	r21, r21
    1392:	bb 27       	eor	r27, r27
    1394:	aa 27       	eor	r26, r26
    1396:	62 17       	cp	r22, r18
    1398:	73 07       	cpc	r23, r19
    139a:	84 07       	cpc	r24, r20
    139c:	38 f0       	brcs	.+14     	; 0x13ac <__divsf3_pse+0x26>
    139e:	9f 5f       	subi	r25, 0xFF	; 255
    13a0:	5f 4f       	sbci	r21, 0xFF	; 255
    13a2:	22 0f       	add	r18, r18
    13a4:	33 1f       	adc	r19, r19
    13a6:	44 1f       	adc	r20, r20
    13a8:	aa 1f       	adc	r26, r26
    13aa:	a9 f3       	breq	.-22     	; 0x1396 <__divsf3_pse+0x10>
    13ac:	33 d0       	rcall	.+102    	; 0x1414 <__divsf3_pse+0x8e>
    13ae:	0e 2e       	mov	r0, r30
    13b0:	3a f0       	brmi	.+14     	; 0x13c0 <__divsf3_pse+0x3a>
    13b2:	e0 e8       	ldi	r30, 0x80	; 128
    13b4:	30 d0       	rcall	.+96     	; 0x1416 <__divsf3_pse+0x90>
    13b6:	91 50       	subi	r25, 0x01	; 1
    13b8:	50 40       	sbci	r21, 0x00	; 0
    13ba:	e6 95       	lsr	r30
    13bc:	00 1c       	adc	r0, r0
    13be:	ca f7       	brpl	.-14     	; 0x13b2 <__divsf3_pse+0x2c>
    13c0:	29 d0       	rcall	.+82     	; 0x1414 <__divsf3_pse+0x8e>
    13c2:	fe 2f       	mov	r31, r30
    13c4:	27 d0       	rcall	.+78     	; 0x1414 <__divsf3_pse+0x8e>
    13c6:	66 0f       	add	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	88 1f       	adc	r24, r24
    13cc:	bb 1f       	adc	r27, r27
    13ce:	26 17       	cp	r18, r22
    13d0:	37 07       	cpc	r19, r23
    13d2:	48 07       	cpc	r20, r24
    13d4:	ab 07       	cpc	r26, r27
    13d6:	b0 e8       	ldi	r27, 0x80	; 128
    13d8:	09 f0       	breq	.+2      	; 0x13dc <__divsf3_pse+0x56>
    13da:	bb 0b       	sbc	r27, r27
    13dc:	80 2d       	mov	r24, r0
    13de:	bf 01       	movw	r22, r30
    13e0:	ff 27       	eor	r31, r31
    13e2:	93 58       	subi	r25, 0x83	; 131
    13e4:	5f 4f       	sbci	r21, 0xFF	; 255
    13e6:	2a f0       	brmi	.+10     	; 0x13f2 <__divsf3_pse+0x6c>
    13e8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ea:	51 05       	cpc	r21, r1
    13ec:	68 f0       	brcs	.+26     	; 0x1408 <__divsf3_pse+0x82>
    13ee:	8d c0       	rjmp	.+282    	; 0x150a <__fp_inf>
    13f0:	d7 c0       	rjmp	.+430    	; 0x15a0 <__fp_szero>
    13f2:	5f 3f       	cpi	r21, 0xFF	; 255
    13f4:	ec f3       	brlt	.-6      	; 0x13f0 <__divsf3_pse+0x6a>
    13f6:	98 3e       	cpi	r25, 0xE8	; 232
    13f8:	dc f3       	brlt	.-10     	; 0x13f0 <__divsf3_pse+0x6a>
    13fa:	86 95       	lsr	r24
    13fc:	77 95       	ror	r23
    13fe:	67 95       	ror	r22
    1400:	b7 95       	ror	r27
    1402:	f7 95       	ror	r31
    1404:	9f 5f       	subi	r25, 0xFF	; 255
    1406:	c9 f7       	brne	.-14     	; 0x13fa <__divsf3_pse+0x74>
    1408:	88 0f       	add	r24, r24
    140a:	91 1d       	adc	r25, r1
    140c:	96 95       	lsr	r25
    140e:	87 95       	ror	r24
    1410:	97 f9       	bld	r25, 7
    1412:	08 95       	ret
    1414:	e1 e0       	ldi	r30, 0x01	; 1
    1416:	66 0f       	add	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	bb 1f       	adc	r27, r27
    141e:	62 17       	cp	r22, r18
    1420:	73 07       	cpc	r23, r19
    1422:	84 07       	cpc	r24, r20
    1424:	ba 07       	cpc	r27, r26
    1426:	20 f0       	brcs	.+8      	; 0x1430 <__divsf3_pse+0xaa>
    1428:	62 1b       	sub	r22, r18
    142a:	73 0b       	sbc	r23, r19
    142c:	84 0b       	sbc	r24, r20
    142e:	ba 0b       	sbc	r27, r26
    1430:	ee 1f       	adc	r30, r30
    1432:	88 f7       	brcc	.-30     	; 0x1416 <__divsf3_pse+0x90>
    1434:	e0 95       	com	r30
    1436:	08 95       	ret

00001438 <__fixunssfsi>:
    1438:	98 d0       	rcall	.+304    	; 0x156a <__fp_splitA>
    143a:	88 f0       	brcs	.+34     	; 0x145e <__fixunssfsi+0x26>
    143c:	9f 57       	subi	r25, 0x7F	; 127
    143e:	90 f0       	brcs	.+36     	; 0x1464 <__fixunssfsi+0x2c>
    1440:	b9 2f       	mov	r27, r25
    1442:	99 27       	eor	r25, r25
    1444:	b7 51       	subi	r27, 0x17	; 23
    1446:	a0 f0       	brcs	.+40     	; 0x1470 <__fixunssfsi+0x38>
    1448:	d1 f0       	breq	.+52     	; 0x147e <__fixunssfsi+0x46>
    144a:	66 0f       	add	r22, r22
    144c:	77 1f       	adc	r23, r23
    144e:	88 1f       	adc	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	1a f0       	brmi	.+6      	; 0x145a <__fixunssfsi+0x22>
    1454:	ba 95       	dec	r27
    1456:	c9 f7       	brne	.-14     	; 0x144a <__fixunssfsi+0x12>
    1458:	12 c0       	rjmp	.+36     	; 0x147e <__fixunssfsi+0x46>
    145a:	b1 30       	cpi	r27, 0x01	; 1
    145c:	81 f0       	breq	.+32     	; 0x147e <__fixunssfsi+0x46>
    145e:	9f d0       	rcall	.+318    	; 0x159e <__fp_zero>
    1460:	b1 e0       	ldi	r27, 0x01	; 1
    1462:	08 95       	ret
    1464:	9c c0       	rjmp	.+312    	; 0x159e <__fp_zero>
    1466:	67 2f       	mov	r22, r23
    1468:	78 2f       	mov	r23, r24
    146a:	88 27       	eor	r24, r24
    146c:	b8 5f       	subi	r27, 0xF8	; 248
    146e:	39 f0       	breq	.+14     	; 0x147e <__fixunssfsi+0x46>
    1470:	b9 3f       	cpi	r27, 0xF9	; 249
    1472:	cc f3       	brlt	.-14     	; 0x1466 <__fixunssfsi+0x2e>
    1474:	86 95       	lsr	r24
    1476:	77 95       	ror	r23
    1478:	67 95       	ror	r22
    147a:	b3 95       	inc	r27
    147c:	d9 f7       	brne	.-10     	; 0x1474 <__fixunssfsi+0x3c>
    147e:	3e f4       	brtc	.+14     	; 0x148e <__fixunssfsi+0x56>
    1480:	90 95       	com	r25
    1482:	80 95       	com	r24
    1484:	70 95       	com	r23
    1486:	61 95       	neg	r22
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	8f 4f       	sbci	r24, 0xFF	; 255
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	08 95       	ret

00001490 <__floatunsisf>:
    1490:	e8 94       	clt
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <__floatsisf+0x12>

00001494 <__floatsisf>:
    1494:	97 fb       	bst	r25, 7
    1496:	3e f4       	brtc	.+14     	; 0x14a6 <__floatsisf+0x12>
    1498:	90 95       	com	r25
    149a:	80 95       	com	r24
    149c:	70 95       	com	r23
    149e:	61 95       	neg	r22
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	99 23       	and	r25, r25
    14a8:	a9 f0       	breq	.+42     	; 0x14d4 <__floatsisf+0x40>
    14aa:	f9 2f       	mov	r31, r25
    14ac:	96 e9       	ldi	r25, 0x96	; 150
    14ae:	bb 27       	eor	r27, r27
    14b0:	93 95       	inc	r25
    14b2:	f6 95       	lsr	r31
    14b4:	87 95       	ror	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b7 95       	ror	r27
    14bc:	f1 11       	cpse	r31, r1
    14be:	f8 cf       	rjmp	.-16     	; 0x14b0 <__floatsisf+0x1c>
    14c0:	fa f4       	brpl	.+62     	; 0x1500 <__floatsisf+0x6c>
    14c2:	bb 0f       	add	r27, r27
    14c4:	11 f4       	brne	.+4      	; 0x14ca <__floatsisf+0x36>
    14c6:	60 ff       	sbrs	r22, 0
    14c8:	1b c0       	rjmp	.+54     	; 0x1500 <__floatsisf+0x6c>
    14ca:	6f 5f       	subi	r22, 0xFF	; 255
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	8f 4f       	sbci	r24, 0xFF	; 255
    14d0:	9f 4f       	sbci	r25, 0xFF	; 255
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <__floatsisf+0x6c>
    14d4:	88 23       	and	r24, r24
    14d6:	11 f0       	breq	.+4      	; 0x14dc <__floatsisf+0x48>
    14d8:	96 e9       	ldi	r25, 0x96	; 150
    14da:	11 c0       	rjmp	.+34     	; 0x14fe <__floatsisf+0x6a>
    14dc:	77 23       	and	r23, r23
    14de:	21 f0       	breq	.+8      	; 0x14e8 <__floatsisf+0x54>
    14e0:	9e e8       	ldi	r25, 0x8E	; 142
    14e2:	87 2f       	mov	r24, r23
    14e4:	76 2f       	mov	r23, r22
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <__floatsisf+0x5e>
    14e8:	66 23       	and	r22, r22
    14ea:	71 f0       	breq	.+28     	; 0x1508 <__floatsisf+0x74>
    14ec:	96 e8       	ldi	r25, 0x86	; 134
    14ee:	86 2f       	mov	r24, r22
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	2a f0       	brmi	.+10     	; 0x1500 <__floatsisf+0x6c>
    14f6:	9a 95       	dec	r25
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	88 1f       	adc	r24, r24
    14fe:	da f7       	brpl	.-10     	; 0x14f6 <__floatsisf+0x62>
    1500:	88 0f       	add	r24, r24
    1502:	96 95       	lsr	r25
    1504:	87 95       	ror	r24
    1506:	97 f9       	bld	r25, 7
    1508:	08 95       	ret

0000150a <__fp_inf>:
    150a:	97 f9       	bld	r25, 7
    150c:	9f 67       	ori	r25, 0x7F	; 127
    150e:	80 e8       	ldi	r24, 0x80	; 128
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	08 95       	ret

00001516 <__fp_nan>:
    1516:	9f ef       	ldi	r25, 0xFF	; 255
    1518:	80 ec       	ldi	r24, 0xC0	; 192
    151a:	08 95       	ret

0000151c <__fp_pscA>:
    151c:	00 24       	eor	r0, r0
    151e:	0a 94       	dec	r0
    1520:	16 16       	cp	r1, r22
    1522:	17 06       	cpc	r1, r23
    1524:	18 06       	cpc	r1, r24
    1526:	09 06       	cpc	r0, r25
    1528:	08 95       	ret

0000152a <__fp_pscB>:
    152a:	00 24       	eor	r0, r0
    152c:	0a 94       	dec	r0
    152e:	12 16       	cp	r1, r18
    1530:	13 06       	cpc	r1, r19
    1532:	14 06       	cpc	r1, r20
    1534:	05 06       	cpc	r0, r21
    1536:	08 95       	ret

00001538 <__fp_round>:
    1538:	09 2e       	mov	r0, r25
    153a:	03 94       	inc	r0
    153c:	00 0c       	add	r0, r0
    153e:	11 f4       	brne	.+4      	; 0x1544 <__fp_round+0xc>
    1540:	88 23       	and	r24, r24
    1542:	52 f0       	brmi	.+20     	; 0x1558 <__fp_round+0x20>
    1544:	bb 0f       	add	r27, r27
    1546:	40 f4       	brcc	.+16     	; 0x1558 <__fp_round+0x20>
    1548:	bf 2b       	or	r27, r31
    154a:	11 f4       	brne	.+4      	; 0x1550 <__fp_round+0x18>
    154c:	60 ff       	sbrs	r22, 0
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <__fp_round+0x20>
    1550:	6f 5f       	subi	r22, 0xFF	; 255
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	08 95       	ret

0000155a <__fp_split3>:
    155a:	57 fd       	sbrc	r21, 7
    155c:	90 58       	subi	r25, 0x80	; 128
    155e:	44 0f       	add	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	59 f0       	breq	.+22     	; 0x157a <__fp_splitA+0x10>
    1564:	5f 3f       	cpi	r21, 0xFF	; 255
    1566:	71 f0       	breq	.+28     	; 0x1584 <__fp_splitA+0x1a>
    1568:	47 95       	ror	r20

0000156a <__fp_splitA>:
    156a:	88 0f       	add	r24, r24
    156c:	97 fb       	bst	r25, 7
    156e:	99 1f       	adc	r25, r25
    1570:	61 f0       	breq	.+24     	; 0x158a <__fp_splitA+0x20>
    1572:	9f 3f       	cpi	r25, 0xFF	; 255
    1574:	79 f0       	breq	.+30     	; 0x1594 <__fp_splitA+0x2a>
    1576:	87 95       	ror	r24
    1578:	08 95       	ret
    157a:	12 16       	cp	r1, r18
    157c:	13 06       	cpc	r1, r19
    157e:	14 06       	cpc	r1, r20
    1580:	55 1f       	adc	r21, r21
    1582:	f2 cf       	rjmp	.-28     	; 0x1568 <__fp_split3+0xe>
    1584:	46 95       	lsr	r20
    1586:	f1 df       	rcall	.-30     	; 0x156a <__fp_splitA>
    1588:	08 c0       	rjmp	.+16     	; 0x159a <__fp_splitA+0x30>
    158a:	16 16       	cp	r1, r22
    158c:	17 06       	cpc	r1, r23
    158e:	18 06       	cpc	r1, r24
    1590:	99 1f       	adc	r25, r25
    1592:	f1 cf       	rjmp	.-30     	; 0x1576 <__fp_splitA+0xc>
    1594:	86 95       	lsr	r24
    1596:	71 05       	cpc	r23, r1
    1598:	61 05       	cpc	r22, r1
    159a:	08 94       	sec
    159c:	08 95       	ret

0000159e <__fp_zero>:
    159e:	e8 94       	clt

000015a0 <__fp_szero>:
    15a0:	bb 27       	eor	r27, r27
    15a2:	66 27       	eor	r22, r22
    15a4:	77 27       	eor	r23, r23
    15a6:	cb 01       	movw	r24, r22
    15a8:	97 f9       	bld	r25, 7
    15aa:	08 95       	ret

000015ac <__mulsf3>:
    15ac:	0b d0       	rcall	.+22     	; 0x15c4 <__mulsf3x>
    15ae:	c4 cf       	rjmp	.-120    	; 0x1538 <__fp_round>
    15b0:	b5 df       	rcall	.-150    	; 0x151c <__fp_pscA>
    15b2:	28 f0       	brcs	.+10     	; 0x15be <__mulsf3+0x12>
    15b4:	ba df       	rcall	.-140    	; 0x152a <__fp_pscB>
    15b6:	18 f0       	brcs	.+6      	; 0x15be <__mulsf3+0x12>
    15b8:	95 23       	and	r25, r21
    15ba:	09 f0       	breq	.+2      	; 0x15be <__mulsf3+0x12>
    15bc:	a6 cf       	rjmp	.-180    	; 0x150a <__fp_inf>
    15be:	ab cf       	rjmp	.-170    	; 0x1516 <__fp_nan>
    15c0:	11 24       	eor	r1, r1
    15c2:	ee cf       	rjmp	.-36     	; 0x15a0 <__fp_szero>

000015c4 <__mulsf3x>:
    15c4:	ca df       	rcall	.-108    	; 0x155a <__fp_split3>
    15c6:	a0 f3       	brcs	.-24     	; 0x15b0 <__mulsf3+0x4>

000015c8 <__mulsf3_pse>:
    15c8:	95 9f       	mul	r25, r21
    15ca:	d1 f3       	breq	.-12     	; 0x15c0 <__mulsf3+0x14>
    15cc:	95 0f       	add	r25, r21
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	55 1f       	adc	r21, r21
    15d2:	62 9f       	mul	r22, r18
    15d4:	f0 01       	movw	r30, r0
    15d6:	72 9f       	mul	r23, r18
    15d8:	bb 27       	eor	r27, r27
    15da:	f0 0d       	add	r31, r0
    15dc:	b1 1d       	adc	r27, r1
    15de:	63 9f       	mul	r22, r19
    15e0:	aa 27       	eor	r26, r26
    15e2:	f0 0d       	add	r31, r0
    15e4:	b1 1d       	adc	r27, r1
    15e6:	aa 1f       	adc	r26, r26
    15e8:	64 9f       	mul	r22, r20
    15ea:	66 27       	eor	r22, r22
    15ec:	b0 0d       	add	r27, r0
    15ee:	a1 1d       	adc	r26, r1
    15f0:	66 1f       	adc	r22, r22
    15f2:	82 9f       	mul	r24, r18
    15f4:	22 27       	eor	r18, r18
    15f6:	b0 0d       	add	r27, r0
    15f8:	a1 1d       	adc	r26, r1
    15fa:	62 1f       	adc	r22, r18
    15fc:	73 9f       	mul	r23, r19
    15fe:	b0 0d       	add	r27, r0
    1600:	a1 1d       	adc	r26, r1
    1602:	62 1f       	adc	r22, r18
    1604:	83 9f       	mul	r24, r19
    1606:	a0 0d       	add	r26, r0
    1608:	61 1d       	adc	r22, r1
    160a:	22 1f       	adc	r18, r18
    160c:	74 9f       	mul	r23, r20
    160e:	33 27       	eor	r19, r19
    1610:	a0 0d       	add	r26, r0
    1612:	61 1d       	adc	r22, r1
    1614:	23 1f       	adc	r18, r19
    1616:	84 9f       	mul	r24, r20
    1618:	60 0d       	add	r22, r0
    161a:	21 1d       	adc	r18, r1
    161c:	82 2f       	mov	r24, r18
    161e:	76 2f       	mov	r23, r22
    1620:	6a 2f       	mov	r22, r26
    1622:	11 24       	eor	r1, r1
    1624:	9f 57       	subi	r25, 0x7F	; 127
    1626:	50 40       	sbci	r21, 0x00	; 0
    1628:	8a f0       	brmi	.+34     	; 0x164c <__mulsf3_pse+0x84>
    162a:	e1 f0       	breq	.+56     	; 0x1664 <__mulsf3_pse+0x9c>
    162c:	88 23       	and	r24, r24
    162e:	4a f0       	brmi	.+18     	; 0x1642 <__mulsf3_pse+0x7a>
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	bb 1f       	adc	r27, r27
    1636:	66 1f       	adc	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	88 1f       	adc	r24, r24
    163c:	91 50       	subi	r25, 0x01	; 1
    163e:	50 40       	sbci	r21, 0x00	; 0
    1640:	a9 f7       	brne	.-22     	; 0x162c <__mulsf3_pse+0x64>
    1642:	9e 3f       	cpi	r25, 0xFE	; 254
    1644:	51 05       	cpc	r21, r1
    1646:	70 f0       	brcs	.+28     	; 0x1664 <__mulsf3_pse+0x9c>
    1648:	60 cf       	rjmp	.-320    	; 0x150a <__fp_inf>
    164a:	aa cf       	rjmp	.-172    	; 0x15a0 <__fp_szero>
    164c:	5f 3f       	cpi	r21, 0xFF	; 255
    164e:	ec f3       	brlt	.-6      	; 0x164a <__mulsf3_pse+0x82>
    1650:	98 3e       	cpi	r25, 0xE8	; 232
    1652:	dc f3       	brlt	.-10     	; 0x164a <__mulsf3_pse+0x82>
    1654:	86 95       	lsr	r24
    1656:	77 95       	ror	r23
    1658:	67 95       	ror	r22
    165a:	b7 95       	ror	r27
    165c:	f7 95       	ror	r31
    165e:	e7 95       	ror	r30
    1660:	9f 5f       	subi	r25, 0xFF	; 255
    1662:	c1 f7       	brne	.-16     	; 0x1654 <__mulsf3_pse+0x8c>
    1664:	fe 2b       	or	r31, r30
    1666:	88 0f       	add	r24, r24
    1668:	91 1d       	adc	r25, r1
    166a:	96 95       	lsr	r25
    166c:	87 95       	ror	r24
    166e:	97 f9       	bld	r25, 7
    1670:	08 95       	ret

00001672 <__udivmodsi4>:
    1672:	a1 e2       	ldi	r26, 0x21	; 33
    1674:	1a 2e       	mov	r1, r26
    1676:	aa 1b       	sub	r26, r26
    1678:	bb 1b       	sub	r27, r27
    167a:	fd 01       	movw	r30, r26
    167c:	0d c0       	rjmp	.+26     	; 0x1698 <__udivmodsi4_ep>

0000167e <__udivmodsi4_loop>:
    167e:	aa 1f       	adc	r26, r26
    1680:	bb 1f       	adc	r27, r27
    1682:	ee 1f       	adc	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	a2 17       	cp	r26, r18
    1688:	b3 07       	cpc	r27, r19
    168a:	e4 07       	cpc	r30, r20
    168c:	f5 07       	cpc	r31, r21
    168e:	20 f0       	brcs	.+8      	; 0x1698 <__udivmodsi4_ep>
    1690:	a2 1b       	sub	r26, r18
    1692:	b3 0b       	sbc	r27, r19
    1694:	e4 0b       	sbc	r30, r20
    1696:	f5 0b       	sbc	r31, r21

00001698 <__udivmodsi4_ep>:
    1698:	66 1f       	adc	r22, r22
    169a:	77 1f       	adc	r23, r23
    169c:	88 1f       	adc	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	1a 94       	dec	r1
    16a2:	69 f7       	brne	.-38     	; 0x167e <__udivmodsi4_loop>
    16a4:	60 95       	com	r22
    16a6:	70 95       	com	r23
    16a8:	80 95       	com	r24
    16aa:	90 95       	com	r25
    16ac:	9b 01       	movw	r18, r22
    16ae:	ac 01       	movw	r20, r24
    16b0:	bd 01       	movw	r22, r26
    16b2:	cf 01       	movw	r24, r30
    16b4:	08 95       	ret

000016b6 <__tablejump2__>:
    16b6:	ee 0f       	add	r30, r30
    16b8:	ff 1f       	adc	r31, r31
    16ba:	00 24       	eor	r0, r0
    16bc:	00 1c       	adc	r0, r0
    16be:	0b be       	out	0x3b, r0	; 59
    16c0:	07 90       	elpm	r0, Z+
    16c2:	f6 91       	elpm	r31, Z
    16c4:	e0 2d       	mov	r30, r0
    16c6:	09 94       	ijmp

000016c8 <__umulhisi3>:
    16c8:	a2 9f       	mul	r26, r18
    16ca:	b0 01       	movw	r22, r0
    16cc:	b3 9f       	mul	r27, r19
    16ce:	c0 01       	movw	r24, r0
    16d0:	a3 9f       	mul	r26, r19
    16d2:	70 0d       	add	r23, r0
    16d4:	81 1d       	adc	r24, r1
    16d6:	11 24       	eor	r1, r1
    16d8:	91 1d       	adc	r25, r1
    16da:	b2 9f       	mul	r27, r18
    16dc:	70 0d       	add	r23, r0
    16de:	81 1d       	adc	r24, r1
    16e0:	11 24       	eor	r1, r1
    16e2:	91 1d       	adc	r25, r1
    16e4:	08 95       	ret

000016e6 <_exit>:
    16e6:	f8 94       	cli

000016e8 <__stop_program>:
    16e8:	ff cf       	rjmp	.-2      	; 0x16e8 <__stop_program>
